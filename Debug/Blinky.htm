<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Debug\Blinky.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Debug\Blinky.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6180002: Last Updated: Fri Nov 17 11:19:03 2023
<BR><P>
<H3>Maximum Stack Usage =        472 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
net_eth_iface_run &rArr; net_icmp6_process &rArr; net_ndp_process &rArr; ndp_send_reply &rArr; net_icmp6_send &rArr; net_ip6_send_frame &rArr; net_ip6_frag_get &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[6]">SVC_Handler</a>
 <LI><a href="#[8]">PendSV_Handler</a>
 <LI><a href="#[9]">SysTick_Handler</a>
 <LI><a href="#[15d]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[343]">osRtxErrorNotify</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[343]">osRtxErrorNotify</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
 <LI><a href="#[231]">net_sys_error</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[231]">net_sys_error</a><BR>
 <LI><a href="#[30d]">sys_map_if</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[30d]">sys_map_if</a><BR>
 <LI><a href="#[87]">osRtxIdleThread</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[87]">osRtxIdleThread</a><BR>
 <LI><a href="#[2a8]">net_strcasecmp</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a8]">net_strcasecmp</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4a]">CAN2_RX0_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4b]">CAN2_RX1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4c]">CAN2_SCE_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[49]">CAN2_TX_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[67]">CEC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[a9]">Control</a> from emac_stm32f7xx.o(.text.Control) referenced from emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[a8]">ControlTimer</a> from emac_stm32f7xx.o(.text.ControlTimer) referenced from emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[58]">DCMI_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream7_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[63]">DMA2D_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream0_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream6_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream7_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[47]">ETH_IRQHandler</a> from emac_stm32f7xx.o(.text.ETH_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[48]">ETH_WKUP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3a]">FMC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5a]">FPU_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[9c]">GetCapabilities</a> from emac_stm32f7xx.o(.text.GetCapabilities) referenced from emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[b3]">GetLinkInfo</a> from phy_lan8742a.o(.text.GetLinkInfo) referenced from phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
 <LI><a href="#[b2]">GetLinkState</a> from phy_lan8742a.o(.text.GetLinkState) referenced from phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
 <LI><a href="#[a0]">GetMacAddress</a> from emac_stm32f7xx.o(.text.GetMacAddress) referenced from emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[a5]">GetRxFrameSize</a> from emac_stm32f7xx.o(.text.GetRxFrameSize) referenced from emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[a6]">GetRxFrameTime</a> from emac_stm32f7xx.o(.text.GetRxFrameTime) referenced from emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[a7]">GetTxFrameTime</a> from emac_stm32f7xx.o(.text.GetTxFrameTime) referenced from emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[9b]">GetVersion</a> from emac_stm32f7xx.o(.text.GetVersion) referenced from emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[ac]">GetVersion</a> from phy_lan8742a.o(.text.GetVersion) referenced from phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[53]">I2C3_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[52]">I2C3_EV_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[69]">I2C4_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[68]">I2C4_EV_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[9d]">Initialize</a> from emac_stm32f7xx.o(.text.Initialize) referenced from emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[ad]">Initialize</a> from phy_lan8742a.o(.text.Initialize) referenced from phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
 <LI><a href="#[66]">LPTIM1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[62]">LTDC_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[61]">LTDC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4d]">OTG_FS_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[34]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[54]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[aa]">PHY_Read</a> from emac_stm32f7xx.o(.text.PHY_Read) referenced from emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[ab]">PHY_Write</a> from emac_stm32f7xx.o(.text.PHY_Write) referenced from emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from irq_armv7m.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[9f]">PowerControl</a> from emac_stm32f7xx.o(.text.PowerControl) referenced from emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[af]">PowerControl</a> from phy_lan8742a.o(.text.PowerControl) referenced from phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
 <LI><a href="#[65]">QUADSPI_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[59]">RNG_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[a4]">ReadFrame</a> from emac_stm32f7xx.o(.text.ReadFrame) referenced from emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[60]">SAI1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[64]">SAI2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3b]">SDMMC1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6a]">SPDIF_RX_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5d]">SPI4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5e]">SPI5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5f]">SPI6_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from irq_armv7m.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[a3]">SendFrame</a> from emac_stm32f7xx.o(.text.SendFrame) referenced from emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[a2]">SetAddressFilter</a> from emac_stm32f7xx.o(.text.SetAddressFilter) referenced from emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[b0]">SetInterface</a> from phy_lan8742a.o(.text.SetInterface) referenced from phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
 <LI><a href="#[a1]">SetMacAddress</a> from emac_stm32f7xx.o(.text.SetMacAddress) referenced from emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[b1]">SetMode</a> from phy_lan8742a.o(.text.SetMode) referenced from phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
 <LI><a href="#[9]">SysTick_Handler</a> from irq_armv7m.o(.text) referenced 2 times from rtx_kernel.o(.text.svcRtxKernelStart)
 <LI><a href="#[9]">SysTick_Handler</a> from irq_armv7m.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6b]">SystemInit</a> from system_stm32f7xx.o(.text.SystemInit) referenced from startup_stm32f746xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5b]">UART7_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5c]">UART8_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[be]">USART1_Control</a> from usart_stm32f7xx.o(.text.USART1_Control) referenced from usart_stm32f7xx.o(.rodata.Driver_USART1)
 <LI><a href="#[b5]">USART1_GetCapabilities</a> from usart_stm32f7xx.o(.text.USART1_GetCapabilities) referenced from usart_stm32f7xx.o(.rodata.Driver_USART1)
 <LI><a href="#[c1]">USART1_GetModemStatus</a> from usart_stm32f7xx.o(.text.USART1_GetModemStatus) referenced from usart_stm32f7xx.o(.rodata.Driver_USART1)
 <LI><a href="#[bd]">USART1_GetRxCount</a> from usart_stm32f7xx.o(.text.USART1_GetRxCount) referenced from usart_stm32f7xx.o(.rodata.Driver_USART1)
 <LI><a href="#[bf]">USART1_GetStatus</a> from usart_stm32f7xx.o(.text.USART1_GetStatus) referenced from usart_stm32f7xx.o(.rodata.Driver_USART1)
 <LI><a href="#[bc]">USART1_GetTxCount</a> from usart_stm32f7xx.o(.text.USART1_GetTxCount) referenced from usart_stm32f7xx.o(.rodata.Driver_USART1)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from usart_stm32f7xx.o(.text.USART1_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[b6]">USART1_Initialize</a> from usart_stm32f7xx.o(.text.USART1_Initialize) referenced from usart_stm32f7xx.o(.rodata.Driver_USART1)
 <LI><a href="#[b8]">USART1_PowerControl</a> from usart_stm32f7xx.o(.text.USART1_PowerControl) referenced from usart_stm32f7xx.o(.rodata.Driver_USART1)
 <LI><a href="#[ba]">USART1_Receive</a> from usart_stm32f7xx.o(.text.USART1_Receive) referenced from usart_stm32f7xx.o(.rodata.Driver_USART1)
 <LI><a href="#[b9]">USART1_Send</a> from usart_stm32f7xx.o(.text.USART1_Send) referenced from usart_stm32f7xx.o(.rodata.Driver_USART1)
 <LI><a href="#[c0]">USART1_SetModemControl</a> from usart_stm32f7xx.o(.text.USART1_SetModemControl) referenced from usart_stm32f7xx.o(.rodata.Driver_USART1)
 <LI><a href="#[bb]">USART1_Transfer</a> from usart_stm32f7xx.o(.text.USART1_Transfer) referenced from usart_stm32f7xx.o(.rodata.Driver_USART1)
 <LI><a href="#[b7]">USART1_Uninitialize</a> from usart_stm32f7xx.o(.text.USART1_Uninitialize) referenced from usart_stm32f7xx.o(.rodata.Driver_USART1)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[51]">USART6_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[b4]">USARTx_GetVersion</a> from usart_stm32f7xx.o(.text.USARTx_GetVersion) referenced from usart_stm32f7xx.o(.rodata.Driver_USART1)
 <LI><a href="#[9e]">Uninitialize</a> from emac_stm32f7xx.o(.text.Uninitialize) referenced from emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[ae]">Uninitialize</a> from phy_lan8742a.o(.text.Uninitialize) referenced from phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6c]">__main</a> from __main.o(!!!main) referenced from startup_stm32f746xx.o(.text)
 <LI><a href="#[6f]">_fputc$unlocked</a> from fputc.o(i.fputc) referenced from _printf_char_file_locked.o(.text)
 <LI><a href="#[6e]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[6d]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[74]">app_main</a> from blinky.o(.text.app_main) referenced 2 times from main.o(.text.main)
 <LI><a href="#[75]">dhcp6_listener</a> from net_dhcp6_client.o(.text.dhcp6_listener) referenced from net_dhcp6_client.o(.text.net_dhcp6_client_init)
 <LI><a href="#[76]">dhcp_listener</a> from net_dhcp_client.o(.text.dhcp_listener) referenced from net_dhcp_client.o(.text.net_dhcp_client_init)
 <LI><a href="#[c2]">eth0_callback</a> from net_config.o(.text.eth0_callback) referenced from net_config.o(.rodata.eth0_ll_config)
 <LI><a href="#[77]">nbns_listener</a> from net_nbns_client.o(.text.nbns_listener) referenced from net_nbns_client.o(.text.net_nbns_client_init)
 <LI><a href="#[79]">netCore_Thread</a> from net_sys.o(.text.netCore_Thread) referenced 2 times from net_config.o(.text.netos_thread_create)
 <LI><a href="#[78]">netETH_Thread</a> from net_eth.o(.text.netETH_Thread) referenced 2 times from net_config.o(.text.netif_create)
 <LI><a href="#[ca]">net_arp_cache_init</a> from net_arp.o(.text.net_arp_cache_init) referenced from net_config.o(.rodata.sys_fn_init)
 <LI><a href="#[d7]">net_arp_cache_run</a> from net_arp.o(.text.net_arp_cache_run) referenced from net_config.o(.rodata.sys_fn_run)
 <LI><a href="#[d1]">net_bsd_socket_init</a> from net_bsd.o(.text.net_bsd_socket_init) referenced from net_config.o(.rodata.sys_fn_init)
 <LI><a href="#[dd]">net_bsd_socket_run</a> from net_bsd.o(.text.net_bsd_socket_run) referenced from net_config.o(.rodata.sys_fn_run)
 <LI><a href="#[73]">net_dbg_info</a> from net_debug.o(.text.net_dbg_info) referenced from net_tcp.o(.text.debug_inf2)
 <LI><a href="#[73]">net_dbg_info</a> from net_debug.o(.text.net_dbg_info) referenced 2 times from net_arp.o(.text.debug_info)
 <LI><a href="#[73]">net_dbg_info</a> from net_debug.o(.text.net_dbg_info) referenced from net_ndp.o(.text.ndp_send_reply)
 <LI><a href="#[73]">net_dbg_info</a> from net_debug.o(.text.net_dbg_info) referenced from net_dhcp6_client.o(.text.net_dhcp6_client_init)
 <LI><a href="#[73]">net_dbg_info</a> from net_debug.o(.text.net_dbg_info) referenced from net_ndp.o(.text.net_ndp_process)
 <LI><a href="#[73]">net_dbg_info</a> from net_debug.o(.text.net_dbg_info) referenced from net_dhcp6_client.o(.text.proc_opt_ia_na)
 <LI><a href="#[d4]">net_dhcp6_client_init</a> from net_dhcp6_client.o(.text.net_dhcp6_client_init) referenced from net_config.o(.rodata.sys_fn_init)
 <LI><a href="#[e0]">net_dhcp6_client_run</a> from net_dhcp6_client.o(.text.net_dhcp6_client_run) referenced from net_config.o(.rodata.sys_fn_run)
 <LI><a href="#[d3]">net_dhcp_client_init</a> from net_dhcp_client.o(.text.net_dhcp_client_init) referenced from net_config.o(.rodata.sys_fn_init)
 <LI><a href="#[df]">net_dhcp_client_run</a> from net_dhcp_client.o(.text.net_dhcp_client_run) referenced from net_config.o(.rodata.sys_fn_run)
 <LI><a href="#[c4]">net_eth_config_mcast</a> from net_eth.o(.text.net_eth_config_mcast) referenced from net_config.o(.rodata.net_eth0_if_config)
 <LI><a href="#[c7]">net_eth_get_option</a> from net_eth.o(.text.net_eth_get_option) referenced from net_config.o(.rodata.netif_getopt_func)
 <LI><a href="#[c8]">net_eth_iface_init</a> from net_eth.o(.text.net_eth_iface_init) referenced from net_config.o(.rodata.sys_fn_init)
 <LI><a href="#[d5]">net_eth_iface_run</a> from net_eth.o(.text.net_eth_iface_run) referenced from net_config.o(.rodata.sys_fn_run)
 <LI><a href="#[c5]">net_eth_output</a> from net_eth.o(.text.net_eth_output) referenced from net_config.o(.rodata.net_eth0_if_config)
 <LI><a href="#[c3]">net_eth_send_frame</a> from net_eth.o(.text.net_eth_send_frame) referenced from net_config.o(.rodata.net_eth0_if_config)
 <LI><a href="#[cc]">net_ip4_frag_init</a> from net_ip4_frag.o(.text.net_ip4_frag_init) referenced from net_config.o(.rodata.sys_fn_init)
 <LI><a href="#[d9]">net_ip4_frag_run</a> from net_ip4_frag.o(.text.net_ip4_frag_run) referenced from net_config.o(.rodata.sys_fn_run)
 <LI><a href="#[cd]">net_ip6_frag_init</a> from net_ip6_frag.o(.text.net_ip6_frag_init) referenced from net_config.o(.rodata.sys_fn_init)
 <LI><a href="#[da]">net_ip6_frag_run</a> from net_ip6_frag.o(.text.net_ip6_frag_run) referenced from net_config.o(.rodata.sys_fn_run)
 <LI><a href="#[c9]">net_loop_iface_init</a> from net_loopback.o(.text.net_loop_iface_init) referenced from net_config.o(.rodata.sys_fn_init)
 <LI><a href="#[d6]">net_loop_iface_run</a> from net_loopback.o(.text.net_loop_iface_run) referenced from net_config.o(.rodata.sys_fn_run)
 <LI><a href="#[c6]">net_loop_send_frame</a> from net_loopback.o(.text.net_loop_send_frame) referenced from net_loopback.o(.rodata.net_loop_if_config)
 <LI><a href="#[d2]">net_nbns_client_init</a> from net_nbns_client.o(.text.net_nbns_client_init) referenced from net_config.o(.rodata.sys_fn_init)
 <LI><a href="#[de]">net_nbns_client_run</a> from net_nbns_client.o(.text.net_nbns_client_run) referenced from net_config.o(.rodata.sys_fn_run)
 <LI><a href="#[cb]">net_ndp_cache_init</a> from net_ndp.o(.text.net_ndp_cache_init) referenced from net_config.o(.rodata.sys_fn_init)
 <LI><a href="#[d8]">net_ndp_cache_run</a> from net_ndp.o(.text.net_ndp_cache_run) referenced from net_config.o(.rodata.sys_fn_run)
 <LI><a href="#[ce]">net_ping_client_init</a> from net_ping_core.o(.text.net_ping_client_init) referenced from net_config.o(.rodata.sys_fn_init)
 <LI><a href="#[db]">net_ping_client_run</a> from net_ping_core.o(.text.net_ping_client_run) referenced from net_config.o(.rodata.sys_fn_run)
 <LI><a href="#[7a]">net_sys_tick</a> from net_sys.o(.text.net_sys_tick) referenced 2 times from net_config.o(.text.netos_timer_create)
 <LI><a href="#[d0]">net_tcp_socket_init</a> from net_tcp.o(.text.net_tcp_socket_init) referenced from net_config.o(.rodata.sys_fn_init)
 <LI><a href="#[dc]">net_tcp_socket_run</a> from net_tcp.o(.text.net_tcp_socket_run) referenced from net_config.o(.rodata.sys_fn_run)
 <LI><a href="#[cf]">net_udp_socket_init</a> from net_udp.o(.text.net_udp_socket_init) referenced from net_config.o(.rodata.sys_fn_init)
 <LI><a href="#[87]">osRtxIdleThread</a> from rtx_config.o(.text.osRtxIdleThread) referenced 2 times from rtx_thread.o(.text.osRtxThreadStartup)
 <LI><a href="#[95]">osRtxMessageQueuePostProcess</a> from rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) referenced 2 times from rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
 <LI><a href="#[96]">osRtxSemaphorePostProcess</a> from rtx_semaphore.o(.text.osRtxSemaphorePostProcess) referenced 2 times from rtx_semaphore.o(.text.svcRtxSemaphoreNew)
 <LI><a href="#[98]">osRtxThreadPostProcess</a> from rtx_thread.o(.text.osRtxThreadPostProcess) referenced 2 times from rtx_thread.o(.text.svcRtxThreadNew)
 <LI><a href="#[9a]">osRtxTimerSetup</a> from rtx_timer.o(.text.osRtxTimerSetup) referenced from rtx_lib.o(.rodata)
 <LI><a href="#[99]">osRtxTimerThread</a> from rtx_timer.o(.text.osRtxTimerThread) referenced from rtx_lib.o(.rodata)
 <LI><a href="#[88]">osRtxTimerTick</a> from rtx_timer.o(.text.osRtxTimerTick) referenced 2 times from rtx_timer.o(.text.osRtxTimerSetup)
 <LI><a href="#[97]">osThreadExit</a> from rtx_thread.o(.text.osThreadExit) referenced 2 times from rtx_thread.o(.text.svcRtxThreadNew)
 <LI><a href="#[7b]">svcRtxDelay</a> from rtx_delay.o(.text.svcRtxDelay) referenced 2 times from rtx_delay.o(.text.osDelay)
 <LI><a href="#[7c]">svcRtxKernelGetState</a> from rtx_kernel.o(.text.svcRtxKernelGetState) referenced 2 times from rtx_kernel.o(.text.osKernelGetState)
 <LI><a href="#[7d]">svcRtxKernelGetTickCount</a> from rtx_kernel.o(.text.svcRtxKernelGetTickCount) referenced 2 times from rtx_kernel.o(.text.osKernelGetTickCount)
 <LI><a href="#[7e]">svcRtxKernelGetTickFreq</a> from rtx_kernel.o(.text.svcRtxKernelGetTickFreq) referenced 2 times from rtx_kernel.o(.text.osKernelGetTickFreq)
 <LI><a href="#[7f]">svcRtxKernelInitialize</a> from rtx_kernel.o(.text.svcRtxKernelInitialize) referenced 2 times from rtx_kernel.o(.text.osKernelInitialize)
 <LI><a href="#[80]">svcRtxKernelStart</a> from rtx_kernel.o(.text.svcRtxKernelStart) referenced 2 times from rtx_kernel.o(.text.osKernelStart)
 <LI><a href="#[81]">svcRtxMessageQueueGet</a> from rtx_msgqueue.o(.text.svcRtxMessageQueueGet) referenced 2 times from rtx_msgqueue.o(.text.osMessageQueueGet)
 <LI><a href="#[82]">svcRtxMessageQueuePut</a> from rtx_msgqueue.o(.text.svcRtxMessageQueuePut) referenced 2 times from rtx_msgqueue.o(.text.osMessageQueuePut)
 <LI><a href="#[83]">svcRtxMutexAcquire</a> from rtx_mutex.o(.text.svcRtxMutexAcquire) referenced 2 times from rtx_mutex.o(.text.osMutexAcquire)
 <LI><a href="#[84]">svcRtxMutexDelete</a> from rtx_mutex.o(.text.svcRtxMutexDelete) referenced 2 times from rtx_mutex.o(.text.osMutexDelete)
 <LI><a href="#[85]">svcRtxMutexNew</a> from rtx_mutex.o(.text.svcRtxMutexNew) referenced 2 times from rtx_mutex.o(.text.osMutexNew)
 <LI><a href="#[86]">svcRtxMutexRelease</a> from rtx_mutex.o(.text.svcRtxMutexRelease) referenced 2 times from rtx_mutex.o(.text.osMutexRelease)
 <LI><a href="#[89]">svcRtxSemaphoreAcquire</a> from rtx_semaphore.o(.text.svcRtxSemaphoreAcquire) referenced 2 times from rtx_semaphore.o(.text.osSemaphoreAcquire)
 <LI><a href="#[8a]">svcRtxSemaphoreNew</a> from rtx_semaphore.o(.text.svcRtxSemaphoreNew) referenced 2 times from rtx_semaphore.o(.text.osSemaphoreNew)
 <LI><a href="#[8b]">svcRtxSemaphoreRelease</a> from rtx_semaphore.o(.text.svcRtxSemaphoreRelease) referenced 2 times from rtx_semaphore.o(.text.osSemaphoreRelease)
 <LI><a href="#[8c]">svcRtxThreadExit</a> from rtx_thread.o(.text.svcRtxThreadExit) referenced 2 times from rtx_thread.o(.text.osThreadExit)
 <LI><a href="#[8d]">svcRtxThreadFlagsClear</a> from rtx_thread.o(.text.svcRtxThreadFlagsClear) referenced 2 times from rtx_thread.o(.text.osThreadFlagsClear)
 <LI><a href="#[8e]">svcRtxThreadFlagsSet</a> from rtx_thread.o(.text.svcRtxThreadFlagsSet) referenced 2 times from rtx_thread.o(.text.osThreadFlagsSet)
 <LI><a href="#[8f]">svcRtxThreadFlagsWait</a> from rtx_thread.o(.text.svcRtxThreadFlagsWait) referenced 2 times from rtx_thread.o(.text.osThreadFlagsWait)
 <LI><a href="#[90]">svcRtxThreadGetId</a> from rtx_thread.o(.text.svcRtxThreadGetId) referenced 2 times from rtx_thread.o(.text.osThreadGetId)
 <LI><a href="#[91]">svcRtxThreadNew</a> from rtx_thread.o(.text.svcRtxThreadNew) referenced 2 times from rtx_thread.o(.text.osThreadNew)
 <LI><a href="#[92]">svcRtxThreadYield</a> from rtx_thread.o(.text.svcRtxThreadYield) referenced 2 times from rtx_thread.o(.text.osThreadYield)
 <LI><a href="#[93]">svcRtxTimerNew</a> from rtx_timer.o(.text.svcRtxTimerNew) referenced 2 times from rtx_timer.o(.text.osTimerNew)
 <LI><a href="#[94]">svcRtxTimerStart</a> from rtx_timer.o(.text.svcRtxTimerStart) referenced 2 times from rtx_timer.o(.text.osTimerStart)
 <LI><a href="#[72]">thrBUT</a> from blinky.o(.text.thrBUT) referenced 2 times from blinky.o(.text.app_main)
 <LI><a href="#[71]">thrLED</a> from blinky.o(.text.thrLED) referenced 2 times from blinky.o(.text.app_main)
 <LI><a href="#[70]">udp_cb_func</a> from blinky.o(.text.udp_cb_func) referenced 2 times from blinky.o(.text.app_main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6c]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(.text)
</UL>
<P><STRONG><a name="[e5]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[e7]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[369]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[36a]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[e8]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[36b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[e9]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[133]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[eb]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[ed]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[ef]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[f0]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[f1]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[36c]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[f3]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[f5]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[f6]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[f7]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[f9]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[fb]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[fd]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[fe]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[ff]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[101]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[36d]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[103]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[105]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[107]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[109]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[36e]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[11f]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[10b]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_fp_1 &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[10d]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000007))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexRelease &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[36f]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[370]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[371]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[10f]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_common &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[372]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[373]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[374]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[111]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[375]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[376]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[112]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000018))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[377]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[378]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[379]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[37a]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[37b]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[37c]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[37d]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[114]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000026))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; free &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexRelease &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[37e]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[37f]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[380]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[381]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[382]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[383]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[124]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[384]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[116]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; free &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexRelease &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[385]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[118]"></a>__rt_lib_shutdown_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_heap_2 &rArr; _terminate_alloc &rArr; __Heap_Finalize &rArr; _mutex_free &rArr; osMutexDelete &rArr; EvrRtxMutexDelete &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
</UL>

<P><STRONG><a name="[386]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[387]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[388]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[389]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[38a]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[e6]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[38b]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[11a]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[11c]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __rt_entry_postsh_1 &rArr; _platform_post_stackheap_init &rArr; osKernelInitialize &rArr; osRtxKernelPreInit &rArr; EventRecorderInitialize &rArr; EventRecorderStart
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[11e]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[120]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; osKernelInitialize &rArr; osRtxKernelPreInit &rArr; EventRecorderInitialize &rArr; EventRecorderStart
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[38c]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[16d]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[123]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[38d]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[125]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 210 bytes, Stack size unknown bytes, irq_armv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = SVC_Handler &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, irq_armv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = PendSV_Handler &rArr; osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; EvrRtxThreadSwitched &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, irq_armv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; osRtxTick_Handler &rArr; osRtxThreadDelayTick &rArr; EvrRtxMessageQueueGetTimeout &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rtx_kernel.o(.text.svcRtxKernelStart)
<LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[15d]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f746xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1e6]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[38e]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>vprintf</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>

<P><STRONG><a name="[12d]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netDHCP_Notify
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>

<P><STRONG><a name="[12f]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[130]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[12e]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[131]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[280]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_find
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_listener
</UL>

<P><STRONG><a name="[2a9]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
</UL>

<P><STRONG><a name="[284]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send_echo
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_frag_get
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_frag_add
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_get
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_add
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_send_frame
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_enqueue
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_enqueue
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_server
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_send_message
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
</UL>

<P><STRONG><a name="[134]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[38f]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>__aeabi_memset4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memset4 &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[390]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_memset4.o(.text), UNUSED)

<P><STRONG><a name="[28e]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
</UL>

<P><STRONG><a name="[391]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[154]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp6_client_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_client_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_nbns_client_init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_bsd_socket_init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_socket_init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_init
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_listen
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fopen$locked
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[186]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PowerControl
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Uninitialize
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Initialize
</UL>

<P><STRONG><a name="[392]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[137]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>

<P><STRONG><a name="[25a]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, strcmpv7m_pel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[393]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[394]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[395]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[13a]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[f4]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[ea]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[13c]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[104]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[106]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[13d]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[fc]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[140]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[f8]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[100]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[141]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[fa]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[102]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[ec]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[135]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[396]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[397]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[398]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[13b]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[147]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[14a]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[14b]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[14c]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[108]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[10a]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[14d]"></a>__flsbuf</STRONG> (Thumb, 482 bytes, Stack size 40 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>

<P><STRONG><a name="[368]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fputc$unlocked
</UL>

<P><STRONG><a name="[399]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[115]"></a>_initio</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, initio_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = _initio &rArr; freopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; free &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexRelease &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[117]"></a>_terminateio</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, initio_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; free &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexRelease &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[15a]"></a>_c16rtomb</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, _c16rtomb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[13e]"></a>_wcrtomb</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, _c16rtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[11b]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[15b]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c16rtomb
</UL>

<P><STRONG><a name="[110]"></a>__rt_locale</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_locale_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[160]"></a>malloc_internal$concurrent</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, h1_alloc_threads.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap1_SizeAdjust
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[152]"></a>malloc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, h1_alloc_threads.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_internal$concurrent
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fopen$locked
</UL>

<P><STRONG><a name="[163]"></a>free_internal$concurrent</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, h1_free_threads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = free_internal$concurrent &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexRelease &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[159]"></a>free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, h1_free_threads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = free &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexRelease &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_internal$concurrent
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[149]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[12c]"></a>_printf_char_file</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, _printf_char_file_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
</UL>

<P><STRONG><a name="[143]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[14f]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[153]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[166]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
</UL>

<P><STRONG><a name="[14e]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[158]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = _fclose_internal &rArr; free &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexRelease &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[39a]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>puts</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, puts_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = puts &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexRelease &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fputc$unlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[157]"></a>setvbuf</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, setvbuf_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = setvbuf &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexRelease &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[155]"></a>freopen</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = freopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; free &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexRelease &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[16c]"></a>_fopen$locked</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, fopen_locked.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[122]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[156]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[39b]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>

<P><STRONG><a name="[162]"></a>__rt_heap_descriptor</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_heap_descriptor_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_heap_descriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[39c]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[39d]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[39e]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[39f]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_internal$concurrent
</UL>

<P><STRONG><a name="[171]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[10e]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _init_alloc &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexRelease &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[173]"></a>__Heap_Initialize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, h1_init_threads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __Heap_Initialize &rArr; _mutex_initialize &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[3a0]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init_threads.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[3a1]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[16f]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[16e]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[126]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[3a2]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc2.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, h1_extend_threads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexRelease &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_internal$concurrent
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlignUpOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[174]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[3a3]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>

<P><STRONG><a name="[172]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[178]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[3a4]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[3a5]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[3a6]"></a>__errno$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[3a7]"></a>__rt_errno_addr$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[3a8]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>_terminate_alloc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, term_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _terminate_alloc &rArr; __Heap_Finalize &rArr; _mutex_free &rArr; osMutexDelete &rArr; EvrRtxMutexDelete &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Finalize
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_heap_2
</UL>

<P><STRONG><a name="[179]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[17b]"></a>__Heap_Finalize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, h1_final_threads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __Heap_Finalize &rArr; _mutex_free &rArr; osMutexDelete &rArr; EvrRtxMutexDelete &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
</UL>

<P><STRONG><a name="[10c]"></a>_fp_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtx_lib.o(.text.$Sub$$_fp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$_fp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[17d]"></a>Buttons_GetState</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, buttons_746g_discovery.o(.text.Buttons_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Buttons_GetState
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thrBUT
</UL>

<P><STRONG><a name="[17f]"></a>Buttons_Initialize</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, buttons_746g_discovery.o(.text.Buttons_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Buttons_Initialize &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[47]"></a>ETH_IRQHandler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, emac_stm32f7xx.o(.text.ETH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ETH_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[182]"></a>EventRecord2</STRONG> (Thumb, 406 bytes, Stack size 40 bytes, eventrecorder.o(.text.EventRecord2))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerGetCount
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotRetrieved
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetTimeout
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotInserted
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInsertPending
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutTimeout
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueCreated
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolAllocTimeout
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreReleased
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreRelease
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreNotAcquired
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquired
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquireTimeout
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquirePending
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquire
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreCreated
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexDestroyed
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexDelete
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexReleased
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexRelease
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexNotAcquired
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquireTimeout
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquirePending
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquire
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexCreated
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexNew
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerStarted
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerStart
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerCreated
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerCallback
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerError
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayCompleted
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitNotCompleted
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitTimeout
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsClearDone
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsClear
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsSetDone
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsSet
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsError
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadDestroyed
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadExit
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSwitched
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadPreempted
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadUnblocked
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadBlocked
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadJoined
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadYield
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadGetId
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadCreated
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelErrorNotify
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetTickFreq
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetTickCount
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStarted
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStart
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialized
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialize
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockAlloc
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitTimeout
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayStarted
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayError
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelay
</UL>

<P><STRONG><a name="[184]"></a>EventRecord4</STRONG> (Thumb, 680 bytes, Stack size 56 bytes, eventrecorder.o(.text.EventRecord4))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerGetCount
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetPending
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGet
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutPending
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePut
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreNew
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerNew
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitCompleted
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitPending
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWait
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadNew
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockFree
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockInit
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryFree
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryAlloc
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryInit
</UL>

<P><STRONG><a name="[345]"></a>EventRecorderDisable</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, eventrecorder.o(.text.EventRecorderDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EventRecorderDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelPreInit
</UL>

<P><STRONG><a name="[344]"></a>EventRecorderEnable</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, eventrecorder.o(.text.EventRecorderEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EventRecorderEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelPreInit
</UL>

<P><STRONG><a name="[185]"></a>EventRecorderInitialize</STRONG> (Thumb, 736 bytes, Stack size 56 bytes, eventrecorder.o(.text.EventRecorderInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = EventRecorderInitialize &rArr; EventRecorderStart
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderStart
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerGetCount
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerGetFreq
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerSetup
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelPreInit
</UL>

<P><STRONG><a name="[189]"></a>EventRecorderStart</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, eventrecorder.o(.text.EventRecorderStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EventRecorderStart
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerGetCount
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[183]"></a>EventRecorderTimerGetCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, eventrecorder.o(.text.EventRecorderTimerGetCount))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderStart
</UL>

<P><STRONG><a name="[188]"></a>EventRecorderTimerGetFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, eventrecorder.o(.text.EventRecorderTimerGetFreq))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[187]"></a>EventRecorderTimerSetup</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, eventrecorder.o(.text.EventRecorderTimerSetup))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[18a]"></a>EvrRtxDelay</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxDelay &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[18b]"></a>EvrRtxDelayCompleted</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxDelayCompleted))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxDelayCompleted &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[18c]"></a>EvrRtxDelayError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxDelayError))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxDelayError &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[18d]"></a>EvrRtxDelayStarted</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxDelayStarted))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxDelayStarted &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
</UL>

<P><STRONG><a name="[18e]"></a>EvrRtxEventFlagsWaitTimeout</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxEventFlagsWaitTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxEventFlagsWaitTimeout &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[18f]"></a>EvrRtxKernelError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxKernelError))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxKernelError &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[190]"></a>EvrRtxKernelErrorNotify</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxKernelErrorNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxKernelErrorNotify &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>

<P><STRONG><a name="[191]"></a>EvrRtxKernelGetTickCount</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxKernelGetTickCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxKernelGetTickCount &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetTickCount
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
</UL>

<P><STRONG><a name="[192]"></a>EvrRtxKernelGetTickFreq</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxKernelGetTickFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxKernelGetTickFreq &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetTickFreq
</UL>

<P><STRONG><a name="[193]"></a>EvrRtxKernelInitialize</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxKernelInitialize &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[194]"></a>EvrRtxKernelInitialized</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxKernelInitialized))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxKernelInitialized &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[195]"></a>EvrRtxKernelStart</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxKernelStart &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[196]"></a>EvrRtxKernelStarted</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxKernelStarted))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxKernelStarted &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[197]"></a>EvrRtxMemoryAlloc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMemoryAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMemoryAlloc &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>

<P><STRONG><a name="[198]"></a>EvrRtxMemoryBlockAlloc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMemoryBlockAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxMemoryBlockAlloc &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[199]"></a>EvrRtxMemoryBlockFree</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMemoryBlockFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMemoryBlockFree &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
</UL>

<P><STRONG><a name="[19a]"></a>EvrRtxMemoryBlockInit</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMemoryBlockInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMemoryBlockInit &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
</UL>

<P><STRONG><a name="[19b]"></a>EvrRtxMemoryFree</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMemoryFree &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>

<P><STRONG><a name="[19c]"></a>EvrRtxMemoryInit</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMemoryInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMemoryInit &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
</UL>

<P><STRONG><a name="[19d]"></a>EvrRtxMemoryPoolAllocTimeout</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMemoryPoolAllocTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxMemoryPoolAllocTimeout &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[19e]"></a>EvrRtxMessageQueueCreated</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMessageQueueCreated))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxMessageQueueCreated &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[19f]"></a>EvrRtxMessageQueueError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMessageQueueError))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxMessageQueueError &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[1a0]"></a>EvrRtxMessageQueueGet</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMessageQueueGet &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[1a1]"></a>EvrRtxMessageQueueGetPending</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMessageQueueGetPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMessageQueueGetPending &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[1a2]"></a>EvrRtxMessageQueueGetTimeout</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMessageQueueGetTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxMessageQueueGetTimeout &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[1a3]"></a>EvrRtxMessageQueueInsertPending</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMessageQueueInsertPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxMessageQueueInsertPending &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>

<P><STRONG><a name="[1a4]"></a>EvrRtxMessageQueueInserted</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMessageQueueInserted))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxMessageQueueInserted &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[1a5]"></a>EvrRtxMessageQueueNotInserted</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMessageQueueNotInserted))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxMessageQueueNotInserted &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
</UL>

<P><STRONG><a name="[1a6]"></a>EvrRtxMessageQueueNotRetrieved</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMessageQueueNotRetrieved))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxMessageQueueNotRetrieved &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[1a7]"></a>EvrRtxMessageQueuePut</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMessageQueuePut &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>

<P><STRONG><a name="[1a8]"></a>EvrRtxMessageQueuePutPending</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMessageQueuePutPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMessageQueuePutPending &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
</UL>

<P><STRONG><a name="[1a9]"></a>EvrRtxMessageQueuePutTimeout</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMessageQueuePutTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxMessageQueuePutTimeout &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[1aa]"></a>EvrRtxMessageQueueRetrieved</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMessageQueueRetrieved))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxMessageQueueRetrieved &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[1ab]"></a>EvrRtxMutexAcquire</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxMutexAcquire &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>

<P><STRONG><a name="[1ac]"></a>EvrRtxMutexAcquirePending</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexAcquirePending))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxMutexAcquirePending &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[1ad]"></a>EvrRtxMutexAcquireTimeout</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexAcquireTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxMutexAcquireTimeout &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[1ae]"></a>EvrRtxMutexAcquired</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexAcquired))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxMutexAcquired &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[1af]"></a>EvrRtxMutexCreated</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexCreated))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxMutexCreated &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
</UL>

<P><STRONG><a name="[1b0]"></a>EvrRtxMutexDelete</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxMutexDelete &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[1b1]"></a>EvrRtxMutexDestroyed</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexDestroyed))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxMutexDestroyed &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
</UL>

<P><STRONG><a name="[1b2]"></a>EvrRtxMutexError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexError))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxMutexError &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[1b3]"></a>EvrRtxMutexNew</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxMutexNew &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[1b4]"></a>EvrRtxMutexNotAcquired</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexNotAcquired))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxMutexNotAcquired &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[1b5]"></a>EvrRtxMutexRelease</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxMutexRelease &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>

<P><STRONG><a name="[1b6]"></a>EvrRtxMutexReleased</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexReleased))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxMutexReleased &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
</UL>

<P><STRONG><a name="[1b7]"></a>EvrRtxSemaphoreAcquire</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxSemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxSemaphoreAcquire &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>

<P><STRONG><a name="[1b8]"></a>EvrRtxSemaphoreAcquirePending</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxSemaphoreAcquirePending))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxSemaphoreAcquirePending &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
</UL>

<P><STRONG><a name="[1b9]"></a>EvrRtxSemaphoreAcquireTimeout</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxSemaphoreAcquireTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxSemaphoreAcquireTimeout &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[1ba]"></a>EvrRtxSemaphoreAcquired</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxSemaphoreAcquired))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxSemaphoreAcquired &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
</UL>

<P><STRONG><a name="[1bb]"></a>EvrRtxSemaphoreCreated</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxSemaphoreCreated))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxSemaphoreCreated &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
</UL>

<P><STRONG><a name="[1bc]"></a>EvrRtxSemaphoreError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxSemaphoreError))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxSemaphoreError &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
</UL>

<P><STRONG><a name="[1bd]"></a>EvrRtxSemaphoreNew</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxSemaphoreNew &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>

<P><STRONG><a name="[1be]"></a>EvrRtxSemaphoreNotAcquired</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxSemaphoreNotAcquired))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxSemaphoreNotAcquired &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
</UL>

<P><STRONG><a name="[1bf]"></a>EvrRtxSemaphoreRelease</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxSemaphoreRelease &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[1c0]"></a>EvrRtxSemaphoreReleased</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxSemaphoreReleased))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxSemaphoreReleased &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
</UL>

<P><STRONG><a name="[1c1]"></a>EvrRtxThreadBlocked</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadBlocked))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxThreadBlocked &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[1c2]"></a>EvrRtxThreadCreated</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadCreated))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxThreadCreated &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[1c3]"></a>EvrRtxThreadDestroyed</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadDestroyed))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxThreadDestroyed &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[1c4]"></a>EvrRtxThreadError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadError))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxThreadError &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
</UL>

<P><STRONG><a name="[1c5]"></a>EvrRtxThreadExit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxThreadExit &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
</UL>

<P><STRONG><a name="[1c6]"></a>EvrRtxThreadFlagsClear</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadFlagsClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxThreadFlagsClear &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsClear
</UL>

<P><STRONG><a name="[1c7]"></a>EvrRtxThreadFlagsClearDone</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadFlagsClearDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxThreadFlagsClearDone &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsClear
</UL>

<P><STRONG><a name="[1c8]"></a>EvrRtxThreadFlagsError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadFlagsError))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxThreadFlagsError &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsClear
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsClear
</UL>

<P><STRONG><a name="[1c9]"></a>EvrRtxThreadFlagsSet</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxThreadFlagsSet &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>

<P><STRONG><a name="[1ca]"></a>EvrRtxThreadFlagsSetDone</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadFlagsSetDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxThreadFlagsSetDone &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>

<P><STRONG><a name="[1cb]"></a>EvrRtxThreadFlagsWait</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxThreadFlagsWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxThreadFlagsWait &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
</UL>

<P><STRONG><a name="[1cc]"></a>EvrRtxThreadFlagsWaitCompleted</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxThreadFlagsWaitCompleted))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxThreadFlagsWaitCompleted &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[1cd]"></a>EvrRtxThreadFlagsWaitNotCompleted</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadFlagsWaitNotCompleted))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxThreadFlagsWaitNotCompleted &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
</UL>

<P><STRONG><a name="[1ce]"></a>EvrRtxThreadFlagsWaitPending</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxThreadFlagsWaitPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxThreadFlagsWaitPending &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
</UL>

<P><STRONG><a name="[1cf]"></a>EvrRtxThreadFlagsWaitTimeout</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadFlagsWaitTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxThreadFlagsWaitTimeout &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[1d0]"></a>EvrRtxThreadGetId</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxThreadGetId &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadGetId
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
</UL>

<P><STRONG><a name="[1d1]"></a>EvrRtxThreadJoined</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadJoined))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxThreadJoined &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[1d2]"></a>EvrRtxThreadNew</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxThreadNew &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<P><STRONG><a name="[1d3]"></a>EvrRtxThreadPreempted</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadPreempted))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxThreadPreempted &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadYield
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[1d4]"></a>EvrRtxThreadSwitched</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadSwitched))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxThreadSwitched &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadYield
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[1d5]"></a>EvrRtxThreadUnblocked</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadUnblocked))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxThreadUnblocked &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>

<P><STRONG><a name="[1d6]"></a>EvrRtxThreadYield</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadYield))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxThreadYield &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
</UL>

<P><STRONG><a name="[1d7]"></a>EvrRtxTimerCallback</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxTimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxTimerCallback &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[1d8]"></a>EvrRtxTimerCreated</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxTimerCreated))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxTimerCreated &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerNew
</UL>

<P><STRONG><a name="[1d9]"></a>EvrRtxTimerError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxTimerError))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxTimerError &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerStart
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerNew
</UL>

<P><STRONG><a name="[1da]"></a>EvrRtxTimerNew</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxTimerNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxTimerNew &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
</UL>

<P><STRONG><a name="[1db]"></a>EvrRtxTimerStart</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxTimerStart &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
</UL>

<P><STRONG><a name="[1dc]"></a>EvrRtxTimerStarted</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxTimerStarted))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxTimerStarted &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerStart
</UL>

<P><STRONG><a name="[250]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, stm32f7xx_hal_gpio.o(.text.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Control
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Uninitialize
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uninitialize
</UL>

<P><STRONG><a name="[180]"></a>HAL_GPIO_Init</STRONG> (Thumb, 424 bytes, Stack size 44 bytes, stm32f7xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buttons_Initialize
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Initialize
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Control
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>

<P><STRONG><a name="[17e]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f7xx_hal_gpio.o(.text.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buttons_GetState
</UL>

<P><STRONG><a name="[1ea]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f7xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SetOut
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
</UL>

<P><STRONG><a name="[1dd]"></a>HAL_GetTick</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, main.o(.text.HAL_GetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_GetTick &rArr; osKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Write
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Read
</UL>

<P><STRONG><a name="[1e0]"></a>HAL_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f7xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e2]"></a>HAL_InitTick</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text.HAL_InitTick))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[29e]"></a>HAL_MPU_ConfigRegion</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f7xx_hal_cortex.o(.text.HAL_MPU_ConfigRegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_MPU_ConfigRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29d]"></a>HAL_MPU_Disable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(.text.HAL_MPU_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29f]"></a>HAL_MPU_Enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(.text.HAL_MPU_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e3]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal.o(.text.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[253]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(.text.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PowerControl
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Uninitialize
</UL>

<P><STRONG><a name="[1e1]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1e4]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, stm32f7xx_hal_pwr_ex.o(.text.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_PWREx_EnableOverDrive &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e5]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 466 bytes, Stack size 24 bytes, stm32f7xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24e]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl
</UL>

<P><STRONG><a name="[1e7]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 836 bytes, Stack size 32 bytes, stm32f7xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e8]"></a>LED_Initialize</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, led_746g_discovery.o(.text.LED_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = LED_Initialize &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[1e9]"></a>LED_Off</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, led_746g_discovery.o(.text.LED_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thrLED
</UL>

<P><STRONG><a name="[1eb]"></a>LED_On</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, led_746g_discovery.o(.text.LED_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_On
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thrLED
</UL>

<P><STRONG><a name="[1ec]"></a>LED_SetOut</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, led_746g_discovery.o(.text.LED_SetOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_SetOut
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_cb_func
</UL>

<P><STRONG><a name="[24f]"></a>LL_RCC_GetUSARTClockFreq</STRONG> (Thumb, 700 bytes, Stack size 0 bytes, stm32f7xx_ll_rcc.o(.text.LL_RCC_GetUSARTClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Control
</UL>

<P><STRONG><a name="[359]"></a>OS_Tick_AcknowledgeIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_AcknowledgeIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[35f]"></a>OS_Tick_Enable</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[35e]"></a>OS_Tick_GetIRQn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_GetIRQn))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[35d]"></a>OS_Tick_Setup</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_Setup))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[2a0]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, system_stm32f7xx.o(.text.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b]"></a>SystemInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system_stm32f7xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(.text)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart_stm32f7xx.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[251]"></a>USART_IRQHandler</STRONG> (Thumb, 612 bytes, Stack size 16 bytes, usart_stm32f7xx.o(.text.USART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[17a]"></a>__user_perthread_libspace</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, rtx_lib.o(.text.__user_perthread_libspace))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __user_perthread_libspace &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[e3]"></a>_mutex_acquire</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rtx_lib.o(.text._mutex_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _mutex_acquire &rArr; osMutexAcquire &rArr; EvrRtxMutexAcquire &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_internal$concurrent
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_internal$concurrent
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fopen$locked
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>

<P><STRONG><a name="[e1]"></a>_mutex_free</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rtx_lib.o(.text._mutex_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _mutex_free &rArr; osMutexDelete &rArr; EvrRtxMutexDelete &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Finalize
</UL>

<P><STRONG><a name="[e2]"></a>_mutex_initialize</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtx_lib.o(.text._mutex_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _mutex_initialize &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fopen$locked
</UL>

<P><STRONG><a name="[e4]"></a>_mutex_release</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rtx_lib.o(.text._mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexRelease &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_internal$concurrent
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_internal$concurrent
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fopen$locked
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>

<P><STRONG><a name="[11d]"></a>_platform_post_stackheap_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rtx_lib.o(.text._platform_post_stackheap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _platform_post_stackheap_init &rArr; osKernelInitialize &rArr; osRtxKernelPreInit &rArr; EventRecorderInitialize &rArr; EventRecorderStart
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_postsh_1
</UL>

<P><STRONG><a name="[167]"></a>_sys_close</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, retarget_io.o(.text._sys_close))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[150]"></a>_sys_flen</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget_io.o(.text._sys_flen))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[151]"></a>_sys_istty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, retarget_io.o(.text._sys_istty))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[16a]"></a>_sys_open</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, retarget_io.o(.text._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_open &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[164]"></a>_sys_seek</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget_io.o(.text._sys_seek))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[165]"></a>_sys_write</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, retarget_io.o(.text._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[74]"></a>app_main</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, blinky.o(.text.app_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = app_main &rArr; send_udp_data &rArr; netUDP_Send &rArr; net_udp_send_if &rArr; net_ip6_send_frame &rArr; net_ip6_frag_get &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netUDP_Open
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netUDP_GetSocket
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buttons_Initialize
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Initialize
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_udp_data
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netIP_ntoa
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netIF_GetOption
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[121]"></a>main</STRONG> (Thumb, 336 bytes, Stack size 72 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = main &rArr; osKernelInitialize &rArr; osRtxKernelPreInit &rArr; EventRecorderInitialize &rArr; EventRecorderStart
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_init
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Enable
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_ConfigRegion
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Disable
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[79]"></a>netCore_Thread</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, net_sys.o(.text.netCore_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = netCore_Thread &rArr; netos_flag_wait &rArr; osThreadFlagsWait &rArr; EvrRtxThreadFlagsWait &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_clear
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_wait
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_timer_start
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_thread_pass
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.text.netos_thread_create)
</UL>
<P><STRONG><a name="[241]"></a>netDHCP6_Notify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_dhcp6_client.o(.text.netDHCP6_Notify))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
</UL>

<P><STRONG><a name="[221]"></a>netDHCP_Notify</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, blinky.o(.text.netDHCP_Notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = netDHCP_Notify &rArr; netIF_GetOption &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netIP_ntoa
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netIF_GetOption
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_client_run
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_req
</UL>

<P><STRONG><a name="[2f0]"></a>netETH_Notify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_eth.o(.text.netETH_Notify))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[2f9]"></a>netETH_ReceiveRaw</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_eth.o(.text.netETH_ReceiveRaw))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[78]"></a>netETH_Thread</STRONG> (Thumb, 224 bytes, Stack size 0 bytes, net_eth.o(.text.netETH_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = netETH_Thread &rArr; net_mem_alloc &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_delay
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_wait
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_wakeup
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_check_link
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.text.netif_create)
</UL>
<P><STRONG><a name="[25d]"></a>netIF_GetOption</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, net_sys.o(.text.netIF_GetOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = netIF_GetOption &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_map_all
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opt_ascii
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netDHCP_Notify
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[25e]"></a>netIP_ntoa</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, net_addr.o(.text.netIP_ntoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = netIP_ntoa &rArr; ip6_ntoa &rArr; ip4_ntoa &rArr; net_itoa &rArr; i2str &rArr; ul2str
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_ntoa
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_ntoa
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netDHCP_Notify
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[25c]"></a>netInitialize</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, net_sys.o(.text.netInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = netInitialize &rArr; net_mem_init &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_mutex_create
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_timer_create
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_thread_create
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_init
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_debug_init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[2c1]"></a>netMAC_aton</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, net_addr.o(.text.netMAC_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = netMAC_aton &rArr; net_xtouc
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_xtouc
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
</UL>

<P><STRONG><a name="[2c3]"></a>netUDP_GetBuffer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, net_udp.o(.text.netUDP_GetBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = netUDP_GetBuffer &rArr; net_udp_get_buf &rArr; net_mem_alloc &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_buf
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_udp_data
</UL>

<P><STRONG><a name="[25f]"></a>netUDP_GetSocket</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, net_udp.o(.text.netUDP_GetSocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = netUDP_GetSocket &rArr; net_udp_get_socket &rArr; OUTLINED_FUNCTION_0 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_socket
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[260]"></a>netUDP_Open</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, net_udp.o(.text.netUDP_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = netUDP_Open &rArr; net_udp_open &rArr; OUTLINED_FUNCTION_6 &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_open
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[2c5]"></a>netUDP_Send</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, net_udp.o(.text.netUDP_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = netUDP_Send &rArr; net_udp_send_if &rArr; net_ip6_send_frame &rArr; net_ip6_frag_get &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_udp_data
</UL>

<P><STRONG><a name="[2c6]"></a>net_addr4_aton</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, net_addr.o(.text.net_addr4_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = net_addr4_aton &rArr; net_atoi
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
</UL>

<P><STRONG><a name="[297]"></a>net_addr4_is_subcast</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net_addr.o(.text.net_addr4_is_subcast))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_is_subcast
</UL>

<P><STRONG><a name="[270]"></a>net_addr4_ntoa</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_addr.o(.text.net_addr4_ntoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = net_addr4_ntoa &rArr; ip4_ntoa &rArr; net_itoa &rArr; i2str &rArr; ul2str
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_ntoa
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_req
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
</UL>

<P><STRONG><a name="[2ff]"></a>net_addr4_to_mac</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net_addr.o(.text.net_addr4_to_mac))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>

<P><STRONG><a name="[2c8]"></a>net_addr6_aton</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, net_addr.o(.text.net_addr6_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = net_addr6_aton &rArr; net_xtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_xtoul
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
</UL>

<P><STRONG><a name="[200]"></a>net_addr6_comp</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, net_addr.o(.text.net_addr6_comp))
<BR><BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_frag_add
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_cache_add
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_find
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_find_route
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_ia_na
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[217]"></a>net_addr6_copy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, net_addr.o(.text.net_addr6_copy))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_get_option
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_send_frame
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_router_remove
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_request
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_reply
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_cache_add
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_process
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_find
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp6_client_run
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_run
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_ia_na
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_send_message
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_client_start
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_listener
</UL>

<P><STRONG><a name="[215]"></a>net_addr6_create</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, net_addr.o(.text.net_addr6_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_addr6_create
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_run
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_init
</UL>

<P><STRONG><a name="[306]"></a>net_addr6_get_solicited</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, net_addr.o(.text.net_addr6_get_solicited))
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_collect_mcast
</UL>

<P><STRONG><a name="[31c]"></a>net_addr6_is_linklocal</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, net_addr.o(.text.net_addr6_is_linklocal))
<BR><BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_find
</UL>

<P><STRONG><a name="[31b]"></a>net_addr6_is_onlink</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, net_addr.o(.text.net_addr6_is_onlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_addr6_is_onlink
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_find
</UL>

<P><STRONG><a name="[314]"></a>net_addr6_is_solicited</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, net_addr.o(.text.net_addr6_is_solicited))
<BR><BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_chk_frame
</UL>

<P><STRONG><a name="[2d1]"></a>net_addr6_is_unspec</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, net_addr.o(.text.net_addr6_is_unspec))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_is_unspec
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_get_local
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_find
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_collect_mcast
</UL>

<P><STRONG><a name="[20d]"></a>net_addr6_ntoa</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_addr.o(.text.net_addr6_ntoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = net_addr6_ntoa &rArr; ip6_ntoa &rArr; ip4_ntoa &rArr; net_itoa &rArr; i2str &rArr; ul2str
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_ntoa
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_run
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_ia_na
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
</UL>

<P><STRONG><a name="[300]"></a>net_addr6_to_mac</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_addr.o(.text.net_addr6_to_mac))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_collect_mcast
</UL>

<P><STRONG><a name="[2cb]"></a>net_addr_find_route</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net_addr.o(.text.net_addr_find_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_addr_find_route &rArr; net_ip4_find_route
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_find_route
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_find_route
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
</UL>

<P><STRONG><a name="[2ce]"></a>net_addr_get_local</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, net_addr.o(.text.net_addr_get_local))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_addr_get_local &rArr; net_ip6_get_local
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_get_local
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_get_local
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
</UL>

<P><STRONG><a name="[2d0]"></a>net_addr_is_unspec</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, net_addr.o(.text.net_addr_is_unspec))
<BR><BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_is_unspec
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
</UL>

<P><STRONG><a name="[2d2]"></a>net_arp_cache_add</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, net_arp.o(.text.net_arp_cache_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = net_arp_cache_add &rArr; arp_que_free &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_is_onlink
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_que_free
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_alloc
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_is_cacheable
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[2d6]"></a>net_arp_cache_early</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, net_arp.o(.text.net_arp_cache_early))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = net_arp_cache_early &rArr; arp_send_request &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_is_onlink
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_que_free
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_alloc
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_is_cacheable
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[2d7]"></a>net_arp_cache_find</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, net_arp.o(.text.net_arp_cache_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = net_arp_cache_find &rArr; arp_que_free &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_is_onlink
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_que_free
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_alloc
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>

<P><STRONG><a name="[ca]"></a>net_arp_cache_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, net_arp.o(.text.net_arp_cache_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = net_arp_cache_init &rArr; OUTLINED_FUNCTION_5 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_init)
</UL>
<P><STRONG><a name="[d7]"></a>net_arp_cache_run</STRONG> (Thumb, 488 bytes, Stack size 40 bytes, net_arp.o(.text.net_arp_cache_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = net_arp_cache_run &rArr; arp_send_request &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_resume
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_que_free
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_run)
</UL>
<P><STRONG><a name="[2da]"></a>net_arp_enqueue</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, net_arp.o(.text.net_arp_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = net_arp_enqueue &rArr; arp_send_request &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_avail
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>

<P><STRONG><a name="[28d]"></a>net_arp_notify</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, net_arp.o(.text.net_arp_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = net_arp_notify &rArr; arp_send_request &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_client_run
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
</UL>

<P><STRONG><a name="[2dc]"></a>net_arp_probe</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, net_arp.o(.text.net_arp_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = net_arp_probe &rArr; arp_send_request &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_client_run
</UL>

<P><STRONG><a name="[2dd]"></a>net_arp_process</STRONG> (Thumb, 444 bytes, Stack size 24 bytes, net_arp.o(.text.net_arp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = net_arp_process &rArr; arp_proc_response &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_resume
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_proc_response
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_sender_valid
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[2c7]"></a>net_atoi</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, net_common.o(.text.net_atoi))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = net_atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_aton
</UL>

<P><STRONG><a name="[274]"></a>net_bin2hex</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, net_common.o(.text.net_bin2hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_bin2hex
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_ntoa
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
</UL>

<P><STRONG><a name="[26d]"></a>net_bsd_notify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_bsd.o(.text.net_bsd_notify))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_evt_send
</UL>

<P><STRONG><a name="[d1]"></a>net_bsd_socket_init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, net_bsd.o(.text.net_bsd_socket_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = net_bsd_socket_init &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_init)
</UL>
<P><STRONG><a name="[dd]"></a>net_bsd_socket_run</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, net_bsd.o(.text.net_bsd_socket_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = net_bsd_socket_run &rArr; net_tcp_listen &rArr; OUTLINED_FUNCTION_1 &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_resume
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_evt_send
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_listen
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_get_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_run)
</UL>
<P><STRONG><a name="[295]"></a>net_chksum_buf</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, net_common.o(.text.net_chksum_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_chksum_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_chksum
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum_buf
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_get_chksum
</UL>

<P><STRONG><a name="[2e1]"></a>net_crc_buf</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, net_common.o(.text.net_crc_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_crc_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_8bit
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
</UL>

<P><STRONG><a name="[202]"></a>net_dbg_error</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, net_debug.o(.text.net_dbg_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_proc
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_time
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_socket
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_buf
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_send_frame
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_send_frame
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_proc_response
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_process
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_chk_frame
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_find
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_client_run
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp6_client_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_client_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_nbns_client_init
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_ia_na
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_listener
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_27
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
</UL>

<P><STRONG><a name="[73]"></a>net_dbg_info</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, net_debug.o(.text.net_dbg_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_proc
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_time
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netIF_GetOption
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_output
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_cwnd
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_resend
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_open
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_send_frame
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_send_frame
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_init
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_init
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_proc_response
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_process
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_chk_frame
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp6_client_run
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_client_run
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ping_client_run
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_run
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_run
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_client_init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_bsd_socket_init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_socket_init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ping_client_init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_init
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_init
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_ia_na
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_send_message
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_client_start
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_listener
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_req
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_listen
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_24
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_22
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 7]<UL><LI> net_arp.o(.text.debug_info)
<LI> net_ndp.o(.text.net_ndp_process)
<LI> net_ndp.o(.text.ndp_send_reply)
<LI> net_udp.o(.text.debug_info)
<LI> net_dhcp6_client.o(.text.net_dhcp6_client_init)
<LI> net_dhcp6_client.o(.text.proc_opt_ia_na)
<LI> net_tcp.o(.text.debug_inf2)
</UL>
<P><STRONG><a name="[2e4]"></a>net_dbg_proc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net_sys.o(.text.net_dbg_proc))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>

<P><STRONG><a name="[2e3]"></a>net_dbg_time</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, net_sys.o(.text.net_dbg_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = net_dbg_time &rArr; net_itoa_n0 &rArr; i2str &rArr; ul2str
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_itoa_n0
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_itoa
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>

<P><STRONG><a name="[2bd]"></a>net_debug_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_debug.o(.text.net_debug_init))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
</UL>

<P><STRONG><a name="[d4]"></a>net_dhcp6_client_init</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, net_dhcp6_client.o(.text.net_dhcp6_client_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = net_dhcp6_client_init &rArr; dhcp6_client_start &rArr; net_udp_open &rArr; OUTLINED_FUNCTION_6 &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_socket
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_client_start
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_init)
</UL>
<P><STRONG><a name="[e0]"></a>net_dhcp6_client_run</STRONG> (Thumb, 820 bytes, Stack size 40 bytes, net_dhcp6_client.o(.text.net_dhcp6_client_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = net_dhcp6_client_run &rArr; dhcp6_send_message &rArr; net_udp_send_if &rArr; net_ip6_send_frame &rArr; net_ip6_frag_get &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_rand32
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tout
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_send_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_run)
</UL>
<P><STRONG><a name="[d3]"></a>net_dhcp_client_init</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, net_dhcp_client.o(.text.net_dhcp_client_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = net_dhcp_client_init &rArr; dhcp_client_start &rArr; net_udp_open &rArr; OUTLINED_FUNCTION_6 &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_socket
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_start
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_init)
</UL>
<P><STRONG><a name="[df]"></a>net_dhcp_client_run</STRONG> (Thumb, 800 bytes, Stack size 40 bytes, net_dhcp_client.o(.text.net_dhcp_client_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = net_dhcp_client_run &rArr; OUTLINED_FUNCTION_8 &rArr; dhcp_send_message &rArr; net_udp_send_if &rArr; net_ip6_send_frame &rArr; net_ip6_frag_get &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netDHCP_Notify
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_rand32
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_probe
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_notify
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_run)
</UL>
<P><STRONG><a name="[28f]"></a>net_eth_callback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_eth.o(.text.net_eth_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = net_eth_callback &rArr; netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth0_callback
</UL>

<P><STRONG><a name="[c4]"></a>net_eth_config_mcast</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, net_eth.o(.text.net_eth_config_mcast))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = net_eth_config_mcast &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_igmp_collect_mcast
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_collect_mcast
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_if_map
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.net_eth0_if_config)
</UL>
<P><STRONG><a name="[c7]"></a>net_eth_get_option</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, net_eth.o(.text.net_eth_get_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = net_eth_get_option &rArr; OUTLINED_FUNCTION_1 &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_opt_len
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_if_map
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.netif_getopt_func)
</UL>
<P><STRONG><a name="[c8]"></a>net_eth_iface_init</STRONG> (Thumb, 820 bytes, Stack size 40 bytes, net_eth.o(.text.net_eth_iface_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = net_eth_iface_init &rArr; OUTLINED_FUNCTION_1 &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_create
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mac_ntoa
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_crc_buf
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_aton
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_aton
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netMAC_aton
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Notify
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_init)
</UL>
<P><STRONG><a name="[d5]"></a>net_eth_iface_run</STRONG> (Thumb, 772 bytes, Stack size 40 bytes, net_eth.o(.text.net_eth_iface_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = net_eth_iface_run &rArr; net_icmp6_process &rArr; net_ndp_process &rArr; ndp_send_reply &rArr; net_icmp6_send &rArr; net_ip6_send_frame &rArr; net_ip6_frag_get &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_config_mcast
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_igmp_process
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_process
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_refresh
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_reass_frame
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_chk_frame
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_reass_frame
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_notify
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_ReceiveRaw
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Notify
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_run)
</UL>
<P><STRONG><a name="[c5]"></a>net_eth_output</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, net_eth.o(.text.net_eth_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = net_eth_output &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_delay
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_if_map
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.net_eth0_if_config)
</UL>
<P><STRONG><a name="[c3]"></a>net_eth_send_frame</STRONG> (Thumb, 396 bytes, Stack size 24 bytes, net_eth.o(.text.net_eth_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = net_eth_send_frame &rArr; net_ndp_enqueue &rArr; ndp_send_request &rArr; net_icmp6_send &rArr; net_ip6_send_frame &rArr; net_ip6_frag_get &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_output
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_enqueue
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_find
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_enqueue
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_find
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_to_mac
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_ntoa
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_is_unspec
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_to_mac
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_ntoa
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_is_subcast
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_if_map
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.net_eth0_if_config)
</UL>
<P><STRONG><a name="[31a]"></a>net_icmp6_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, net_icmp6.o(.text.net_icmp6_init))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_init
</UL>

<P><STRONG><a name="[2f8]"></a>net_icmp6_process</STRONG> (Thumb, 424 bytes, Stack size 40 bytes, net_icmp6.o(.text.net_icmp6_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = net_icmp6_process &rArr; net_ndp_process &rArr; ndp_send_reply &rArr; net_icmp6_send &rArr; net_ip6_send_frame &rArr; net_ip6_frag_get &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_send_frame
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_chksum
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_comp
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[2af]"></a>net_icmp6_send</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, net_icmp6.o(.text.net_icmp6_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = net_icmp6_send &rArr; net_ip6_send_frame &rArr; net_ip6_frag_get &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_tx_offl_hl
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_send_frame
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_chksum
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_get_solicited
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send_echo
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_request
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_reply
</UL>

<P><STRONG><a name="[308]"></a>net_icmp6_send_echo</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, net_icmp6.o(.text.net_icmp6_send_echo))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = net_icmp6_send_echo &rArr; net_icmp6_send &rArr; net_ip6_send_frame &rArr; net_ip6_frag_get &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send_req
</UL>

<P><STRONG><a name="[319]"></a>net_icmp_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, net_icmp.o(.text.net_icmp_init))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_init
</UL>

<P><STRONG><a name="[2fb]"></a>net_icmp_process</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, net_icmp.o(.text.net_icmp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = net_icmp_process &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum_buf
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[30b]"></a>net_icmp_send_echo</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, net_icmp.o(.text.net_icmp_send_echo))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = net_icmp_send_echo &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_tx_offl_hl
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum_buf
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send_req
</UL>

<P><STRONG><a name="[2b9]"></a>net_if_map_all</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_sys.o(.text.net_if_map_all))
<BR><BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_map_if
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netIF_GetOption
</UL>

<P><STRONG><a name="[2ed]"></a>net_igmp_collect_mcast</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text.net_igmp_collect_mcast))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_config_mcast
</UL>

<P><STRONG><a name="[30f]"></a>net_igmp_is_member</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text.net_igmp_is_member))
<BR><BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
</UL>

<P><STRONG><a name="[2fd]"></a>net_igmp_process</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_config.o(.text.net_igmp_process))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[2f4]"></a>net_ip4_chk_frame</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, net_ip4.o(.text.net_ip4_chk_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = net_ip4_chk_frame &rArr; debug_info &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_igmp_is_member
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_get_mtu
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_get_chksum
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_is_subcast
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[310]"></a>net_ip4_chksum</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, net_ip4.o(.text.net_ip4_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = net_ip4_chksum &rArr; net_chksum_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_chksum_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_process
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[309]"></a>net_ip4_chksum_buf</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_ip4.o(.text.net_ip4_chksum_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_ip4_chksum_buf &rArr; net_chksum_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_chksum_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
</UL>

<P><STRONG><a name="[2cc]"></a>net_ip4_find_route</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, net_ip4.o(.text.net_ip4_find_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_ip4_find_route
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_is_onlink
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_find_route
</UL>

<P><STRONG><a name="[311]"></a>net_ip4_frag_add</STRONG> (Thumb, 432 bytes, Stack size 32 bytes, net_ip4_frag.o(.text.net_ip4_frag_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = net_ip4_frag_add &rArr; OUTLINED_FUNCTION_0 &rArr; que_free_list &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_reass_frame
</UL>

<P><STRONG><a name="[312]"></a>net_ip4_frag_get</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, net_ip4_frag.o(.text.net_ip4_frag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = net_ip4_frag_get &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_send_frame
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
</UL>

<P><STRONG><a name="[cc]"></a>net_ip4_frag_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, net_ip4_frag.o(.text.net_ip4_frag_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = net_ip4_frag_init
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_init)
</UL>
<P><STRONG><a name="[d9]"></a>net_ip4_frag_run</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, net_ip4_frag.o(.text.net_ip4_frag_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = net_ip4_frag_run &rArr; OUTLINED_FUNCTION_0 &rArr; que_free_list &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_run)
</UL>
<P><STRONG><a name="[2cf]"></a>net_ip4_get_local</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, net_ip4.o(.text.net_ip4_get_local))
<BR><BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_get_local
</UL>

<P><STRONG><a name="[313]"></a>net_ip4_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, net_ip4.o(.text.net_ip4_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = net_ip4_init &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_init
</UL>

<P><STRONG><a name="[2d4]"></a>net_ip4_is_onlink</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net_ip4.o(.text.net_ip4_is_onlink))
<BR><BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_find
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_find_route
</UL>

<P><STRONG><a name="[2fa]"></a>net_ip4_reass_frame</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, net_ip4.o(.text.net_ip4_reass_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = net_ip4_reass_frame &rArr; net_ip4_frag_add &rArr; OUTLINED_FUNCTION_0 &rArr; que_free_list &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_add
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[30a]"></a>net_ip4_send_frame</STRONG> (Thumb, 360 bytes, Stack size 32 bytes, net_ip4.o(.text.net_ip4_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_get
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_get_mtu
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_get_chksum
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
</UL>

<P><STRONG><a name="[30c]"></a>net_ip4_tx_offl_hl</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, net_ip4.o(.text.net_ip4_tx_offl_hl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_ip4_tx_offl_hl
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
</UL>

<P><STRONG><a name="[2f5]"></a>net_ip6_chk_frame</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, net_ip6.o(.text.net_ip6_chk_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = net_ip6_chk_frame &rArr; debug_info &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_is_solicited
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_get_mtu
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[303]"></a>net_ip6_chksum</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, net_ip6.o(.text.net_ip6_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = net_ip6_chksum &rArr; net_chksum_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_chksum_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_process
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
</UL>

<P><STRONG><a name="[2ee]"></a>net_ip6_collect_mcast</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, net_ip6.o(.text.net_ip6_collect_mcast))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_ip6_collect_mcast
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_get_solicited
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_to_mac
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_is_unspec
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_config_mcast
</UL>

<P><STRONG><a name="[2cd]"></a>net_ip6_find_route</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, net_ip6.o(.text.net_ip6_find_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_ip6_find_route
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_find_route
</UL>

<P><STRONG><a name="[316]"></a>net_ip6_frag_add</STRONG> (Thumb, 464 bytes, Stack size 40 bytes, net_ip6_frag.o(.text.net_ip6_frag_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = net_ip6_frag_add &rArr; OUTLINED_FUNCTION_0 &rArr; que_free_list &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_comp
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_reass_frame
</UL>

<P><STRONG><a name="[317]"></a>net_ip6_frag_get</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, net_ip6_frag.o(.text.net_ip6_frag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = net_ip6_frag_get &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_send_frame
</UL>

<P><STRONG><a name="[cd]"></a>net_ip6_frag_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, net_ip6_frag.o(.text.net_ip6_frag_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = net_ip6_frag_init
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_init)
</UL>
<P><STRONG><a name="[da]"></a>net_ip6_frag_run</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, net_ip6_frag.o(.text.net_ip6_frag_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = net_ip6_frag_run &rArr; OUTLINED_FUNCTION_0 &rArr; que_free_list &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_run)
</UL>
<P><STRONG><a name="[2b1]"></a>net_ip6_get_local</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, net_ip6.o(.text.net_ip6_get_local))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_ip6_get_local
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_is_unspec
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_get_local
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_request
</UL>

<P><STRONG><a name="[318]"></a>net_ip6_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, net_ip6.o(.text.net_ip6_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = net_ip6_init &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_init
</UL>

<P><STRONG><a name="[2f7]"></a>net_ip6_reass_frame</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net_ip6.o(.text.net_ip6_reass_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = net_ip6_reass_frame &rArr; net_ip6_frag_add &rArr; OUTLINED_FUNCTION_0 &rArr; que_free_list &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_frag_add
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[305]"></a>net_ip6_send_frame</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, net_ip6.o(.text.net_ip6_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = net_ip6_send_frame &rArr; net_ip6_frag_get &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_frag_get
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_get
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_get_mtu
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
</UL>

<P><STRONG><a name="[307]"></a>net_ip6_tx_offl_hl</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, net_ip6.o(.text.net_ip6_tx_offl_hl))
<BR><BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send
</UL>

<P><STRONG><a name="[299]"></a>net_itoa</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_common.o(.text.net_itoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = net_itoa &rArr; i2str &rArr; ul2str
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2str
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_time
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_ntoa
</UL>

<P><STRONG><a name="[2e5]"></a>net_itoa_n0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_common.o(.text.net_itoa_n0))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = net_itoa_n0 &rArr; i2str &rArr; ul2str
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2str
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_time
</UL>

<P><STRONG><a name="[c9]"></a>net_loop_iface_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, net_loopback.o(.text.net_loop_iface_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = net_loop_iface_init &rArr; net_ip6_init &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_init
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_init
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_init
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_init)
</UL>
<P><STRONG><a name="[d6]"></a>net_loop_iface_run</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, net_loopback.o(.text.net_loop_iface_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = net_loop_iface_run &rArr; net_icmp6_process &rArr; net_ndp_process &rArr; ndp_send_reply &rArr; net_icmp6_send &rArr; net_ip6_send_frame &rArr; net_ip6_frag_get &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_process
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_chk_frame
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_run)
</UL>
<P><STRONG><a name="[c6]"></a>net_loop_send_frame</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, net_loopback.o(.text.net_loop_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = net_loop_send_frame &rArr; net_mem_alloc &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_wakeup
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_loopback.o(.rodata.net_loop_if_config)
</UL>
<P><STRONG><a name="[26f]"></a>net_mac_ntoa</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_addr.o(.text.net_mac_ntoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = net_mac_ntoa &rArr; mac_ntoa &rArr; net_bin2hex
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_ntoa
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
</UL>

<P><STRONG><a name="[268]"></a>net_mem_alloc</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, net_mem.o(.text.net_mem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = net_mem_alloc &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_unlock
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_config_mcast
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_buf
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send_echo
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_frag_get
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_frag_add
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_get
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_add
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_send_frame
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_request
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_reply
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_enqueue
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_enqueue
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
</UL>

<P><STRONG><a name="[2db]"></a>net_mem_avail</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, net_mem.o(.text.net_mem_avail))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_enqueue
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_enqueue
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
</UL>

<P><STRONG><a name="[265]"></a>net_mem_free</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, net_mem.o(.text.net_mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_unlock
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_config_mcast
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_free
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send_echo
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_frag_get
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_frag_add
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_free_list
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_get
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_add
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_free_list
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_request
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_que_free
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_reply
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_que_free
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_proc_response
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
</UL>

<P><STRONG><a name="[2be]"></a>net_mem_init</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, net_mem.o(.text.net_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = net_mem_init &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_mutex_create
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
</UL>

<P><STRONG><a name="[d2]"></a>net_nbns_client_init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, net_nbns_client.o(.text.net_nbns_client_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = net_nbns_client_init &rArr; net_udp_open &rArr; OUTLINED_FUNCTION_6 &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_open
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_socket
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_init)
</UL>
<P><STRONG><a name="[de]"></a>net_nbns_client_run</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net_nbns_client.o(.text.net_nbns_client_run))
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_run)
</UL>
<P><STRONG><a name="[301]"></a>net_ndp_cache_find</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, net_ndp.o(.text.net_ndp_cache_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = net_ndp_cache_find &rArr; ndp_que_free &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_is_onlink
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_is_linklocal
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_comp
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_que_free
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_cache_alloc
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_is_unspec
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>

<P><STRONG><a name="[cb]"></a>net_ndp_cache_init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, net_ndp.o(.text.net_ndp_cache_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = net_ndp_cache_init &rArr; OUTLINED_FUNCTION_3 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_create
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_ntoa
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_init)
</UL>
<P><STRONG><a name="[2f6]"></a>net_ndp_cache_refresh</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, net_ndp.o(.text.net_ndp_cache_refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = net_ndp_cache_refresh &rArr; debug_inf2 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[d8]"></a>net_ndp_cache_run</STRONG> (Thumb, 776 bytes, Stack size 40 bytes, net_ndp.o(.text.net_ndp_cache_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = net_ndp_cache_run &rArr; ndp_send_request &rArr; net_icmp6_send &rArr; net_ip6_send_frame &rArr; net_ip6_frag_get &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_rand32
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_create
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_router_remove
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_request
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_que_free
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_resume
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_ntoa
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_run)
</UL>
<P><STRONG><a name="[302]"></a>net_ndp_enqueue</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, net_ndp.o(.text.net_ndp_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = net_ndp_enqueue &rArr; ndp_send_request &rArr; net_icmp6_send &rArr; net_ip6_send_frame &rArr; net_ip6_frag_get &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_request
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_avail
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>

<P><STRONG><a name="[304]"></a>net_ndp_process</STRONG> (Thumb, 1408 bytes, Stack size 48 bytes, net_ndp.o(.text.net_ndp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = net_ndp_process &rArr; ndp_send_reply &rArr; net_icmp6_send &rArr; net_ip6_send_frame &rArr; net_ip6_frag_get &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_is_linklocal
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_comp
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_router_remove
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_que_free
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_reply
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_cache_add
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_check_frame
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_resume
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mac_ntoa
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_ntoa
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_is_unspec
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
</UL>

<P><STRONG><a name="[ce]"></a>net_ping_client_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, net_ping_core.o(.text.net_ping_client_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = net_ping_client_init &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_init)
</UL>
<P><STRONG><a name="[db]"></a>net_ping_client_run</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, net_ping_core.o(.text.net_ping_client_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = net_ping_client_run &rArr; ping_send_req &rArr; net_icmp6_send_echo &rArr; net_icmp6_send &rArr; net_ip6_send_frame &rArr; net_ip6_frag_get &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_run)
</UL>
<P><STRONG><a name="[24d]"></a>net_rand32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, net_sys.o(.text.net_rand32))
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp6_client_run
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_client_run
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_run
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tout
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_client_start
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_start
</UL>

<P><STRONG><a name="[2a8]"></a>net_strcasecmp</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, net_common.o(.text.net_strcasecmp))
<BR><BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_strcasecmp
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
</UL>

<P><STRONG><a name="[285]"></a>net_strcpy</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, net_common.o(.text.net_strcpy))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_ntoa
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_send_message
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
</UL>

<P><STRONG><a name="[29c]"></a>net_strtoupper</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, net_common.o(.text.net_strtoupper))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_strtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_ntoa
</UL>

<P><STRONG><a name="[231]"></a>net_sys_error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_config.o(.text.net_sys_error))
<BR><BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp6_client_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_client_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_nbns_client_init
</UL>

<P><STRONG><a name="[245]"></a>net_sys_lock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_sys.o(.text.net_sys_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = net_sys_lock &rArr; netos_lock &rArr; osMutexAcquire &rArr; EvrRtxMutexAcquire &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netUDP_Open
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netUDP_Send
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netIF_GetOption
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
</UL>

<P><STRONG><a name="[26c]"></a>net_sys_resume</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, net_sys.o(.text.net_sys_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = net_sys_resume &rArr; netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_bsd_socket_run
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_run
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_run
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_evt_send
</UL>

<P><STRONG><a name="[7a]"></a>net_sys_tick</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, net_sys.o(.text.net_sys_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = net_sys_tick &rArr; net_sys_wakeup &rArr; netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_wakeup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.text.netos_timer_create)
</UL>
<P><STRONG><a name="[22e]"></a>net_sys_unlock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_sys.o(.text.net_sys_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = net_sys_unlock &rArr; netos_unlock &rArr; osMutexRelease &rArr; EvrRtxMutexRelease &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netIF_GetOption
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>

<P><STRONG><a name="[2b8]"></a>net_sys_wakeup</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, net_sys.o(.text.net_sys_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = net_sys_wakeup &rArr; netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_tick
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_send_frame
</UL>

<P><STRONG><a name="[2df]"></a>net_tcp_get_state</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, net_tcp.o(.text.net_tcp_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_bsd_socket_run
</UL>

<P><STRONG><a name="[2e0]"></a>net_tcp_listen</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, net_tcp.o(.text.net_tcp_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = net_tcp_listen &rArr; OUTLINED_FUNCTION_1 &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_bsd_socket_run
</UL>

<P><STRONG><a name="[2fe]"></a>net_tcp_process</STRONG> (Thumb, 2660 bytes, Stack size 64 bytes, net_tcp.o(.text.net_tcp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = net_tcp_process &rArr; tcp_send_reset &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_ip6_frag_get &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_cwnd
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_init
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_chksum
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_rand32
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_comp
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_27
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_26
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_25
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_23
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_22
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_21
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_20
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_19
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_18
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_17
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[d0]"></a>net_tcp_socket_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, net_tcp.o(.text.net_tcp_socket_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = net_tcp_socket_init &rArr; OUTLINED_FUNCTION_4 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_init)
</UL>
<P><STRONG><a name="[dc]"></a>net_tcp_socket_run</STRONG> (Thumb, 1012 bytes, Stack size 48 bytes, net_tcp.o(.text.net_tcp_socket_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = net_tcp_socket_run &rArr; tcp_que_resend &rArr; tcp_send_data &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_ip6_frag_get &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_free
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_init
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_resend
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_avail
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_25
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_22
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_run)
</UL>
<P><STRONG><a name="[288]"></a>net_udp_enable_lla</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, net_udp.o(.text.net_udp_enable_lla))
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_start
</UL>

<P><STRONG><a name="[283]"></a>net_udp_get_buf</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, net_udp.o(.text.net_udp_get_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = net_udp_get_buf &rArr; net_mem_alloc &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netUDP_GetBuffer
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_send_message
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
</UL>

<P><STRONG><a name="[2c4]"></a>net_udp_get_socket</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, net_udp.o(.text.net_udp_get_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = net_udp_get_socket &rArr; OUTLINED_FUNCTION_0 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netUDP_GetSocket
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp6_client_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_client_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_nbns_client_init
</UL>

<P><STRONG><a name="[27c]"></a>net_udp_open</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, net_udp.o(.text.net_udp_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = net_udp_open &rArr; OUTLINED_FUNCTION_6 &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_port_in_use
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netUDP_Open
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_nbns_client_init
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_client_start
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_start
</UL>

<P><STRONG><a name="[2fc]"></a>net_udp_process</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, net_udp.o(.text.net_udp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = net_udp_process &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_chksum
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[286]"></a>net_udp_send_if</STRONG> (Thumb, 528 bytes, Stack size 56 bytes, net_udp.o(.text.net_udp_send_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = net_udp_send_if &rArr; net_ip6_send_frame &rArr; net_ip6_frag_get &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_is_unspec
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_get_local
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_find_route
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_tx_offl_hl
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_send_frame
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_chksum
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_tx_offl_hl
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netUDP_Send
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_send_message
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
</UL>

<P><STRONG><a name="[cf]"></a>net_udp_socket_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, net_udp.o(.text.net_udp_socket_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = net_udp_socket_init &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_init)
</UL>
<P><STRONG><a name="[1fd]"></a>net_ultox</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, net_common.o(.text.net_ultox))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_ultox
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[2c2]"></a>net_xtouc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, net_common.o(.text.net_xtouc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_xtouc
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2uc
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netMAC_aton
</UL>

<P><STRONG><a name="[2c9]"></a>net_xtoul</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, net_common.o(.text.net_xtoul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_xtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_aton
</UL>

<P><STRONG><a name="[2f3]"></a>netif_create</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, net_config.o(.text.netif_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = netif_create &rArr; osSemaphoreNew &rArr; EvrRtxSemaphoreNew &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
</UL>

<P><STRONG><a name="[290]"></a>netif_lock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, net_config.o(.text.netif_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = netif_lock &rArr; osSemaphoreAcquire &rArr; EvrRtxSemaphoreNotAcquired &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_lock
</UL>

<P><STRONG><a name="[291]"></a>netif_unlock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, net_config.o(.text.netif_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = netif_unlock &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_unlock
</UL>

<P><STRONG><a name="[2b6]"></a>netos_delay</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, net_config.o(.text.netos_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = netos_delay &rArr; osDelay &rArr; EvrRtxDelayError &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_output
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
</UL>

<P><STRONG><a name="[2b4]"></a>netos_flag_clear</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, net_config.o(.text.netos_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = netos_flag_clear &rArr; osThreadFlagsClear &rArr; EvrRtxThreadFlagsClear &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsClear
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
</UL>

<P><STRONG><a name="[2eb]"></a>netos_flag_set</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, net_config.o(.text.netos_flag_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_callback
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_resume
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_wakeup
</UL>

<P><STRONG><a name="[2b3]"></a>netos_flag_wait</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, net_config.o(.text.netos_flag_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = netos_flag_wait &rArr; osThreadFlagsWait &rArr; EvrRtxThreadFlagsWait &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
</UL>

<P><STRONG><a name="[2bb]"></a>netos_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, net_config.o(.text.netos_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = netos_init &rArr; osKernelGetTickFreq &rArr; EvrRtxKernelGetTickFreq &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
</UL>

<P><STRONG><a name="[2a4]"></a>netos_lock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, net_config.o(.text.netos_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = netos_lock &rArr; osMutexAcquire &rArr; EvrRtxMutexAcquire &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_lock
</UL>

<P><STRONG><a name="[2bc]"></a>netos_mutex_create</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, net_config.o(.text.netos_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = netos_mutex_create &rArr; osMutexNew &rArr; EvrRtxMutexNew &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_init
</UL>

<P><STRONG><a name="[2bf]"></a>netos_thread_create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, net_config.o(.text.netos_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = netos_thread_create &rArr; osThreadNew &rArr; EvrRtxThreadNew &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
</UL>

<P><STRONG><a name="[2b5]"></a>netos_thread_pass</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, net_config.o(.text.netos_thread_pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = netos_thread_pass &rArr; osThreadYield &rArr; EvrRtxThreadYield &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
</UL>

<P><STRONG><a name="[2c0]"></a>netos_timer_create</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, net_config.o(.text.netos_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = netos_timer_create &rArr; osTimerNew &rArr; EvrRtxTimerNew &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
</UL>

<P><STRONG><a name="[2b2]"></a>netos_timer_start</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, net_config.o(.text.netos_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = netos_timer_start &rArr; osTimerStart &rArr; EvrRtxTimerStart &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
</UL>

<P><STRONG><a name="[2a6]"></a>netos_unlock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, net_config.o(.text.netos_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = netos_unlock &rArr; osMutexRelease &rArr; EvrRtxMutexRelease &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_unlock
</UL>

<P><STRONG><a name="[262]"></a>osDelay</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rtx_delay.o(.text.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osDelay &rArr; EvrRtxDelayError &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayError
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thrLED
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thrBUT
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_delay
</UL>

<P><STRONG><a name="[1de]"></a>osKernelGetState</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelGetState))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelPreInit
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[1df]"></a>osKernelGetTickCount</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rtx_kernel.o(.text.osKernelGetTickCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[33a]"></a>osKernelGetTickFreq</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rtx_kernel.o(.text.osKernelGetTickFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osKernelGetTickFreq &rArr; EvrRtxKernelGetTickFreq &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetTickFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_init
</UL>

<P><STRONG><a name="[259]"></a>osKernelInitialize</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rtx_kernel.o(.text.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = osKernelInitialize &rArr; osRtxKernelPreInit &rArr; EventRecorderInitialize &rArr; EventRecorderStart
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelPreInit
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialize
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a2]"></a>osKernelStart</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rtx_kernel.o(.text.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osKernelStart &rArr; EvrRtxKernelStart &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStart
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[33f]"></a>osMessageQueueGet</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osMessageQueueGet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotRetrieved
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGet
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[341]"></a>osMessageQueuePut</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osMessageQueuePut &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotInserted
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInsertPending
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePut
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[255]"></a>osMutexAcquire</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, rtx_mutex.o(.text.osMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osMutexAcquire &rArr; EvrRtxMutexAcquire &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquire
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_lock
</UL>

<P><STRONG><a name="[256]"></a>osMutexDelete</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rtx_mutex.o(.text.osMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osMutexDelete &rArr; EvrRtxMutexDelete &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexDelete
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
</UL>

<P><STRONG><a name="[257]"></a>osMutexNew</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rtx_mutex.o(.text.osMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osMutexNew &rArr; EvrRtxMutexNew &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexNew
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_mutex_create
</UL>

<P><STRONG><a name="[258]"></a>osMutexRelease</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rtx_mutex.o(.text.osMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osMutexRelease &rArr; EvrRtxMutexRelease &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexRelease
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_unlock
</UL>

<P><STRONG><a name="[343]"></a>osRtxErrorNotify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_config.o(.text.osRtxErrorNotify))
<BR><BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>

<P><STRONG><a name="[87]"></a>osRtxIdleThread</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_config.o(.text.osRtxIdleThread))
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxIdleThread
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxIdleThread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osRtxThreadStartup)
</UL>
<P><STRONG><a name="[128]"></a>osRtxKernelErrorNotify</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rtx_kernel.o(.text.osRtxKernelErrorNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[33e]"></a>osRtxKernelPreInit</STRONG> (Thumb, 242 bytes, Stack size 8 bytes, rtx_lib.o(.text.osRtxKernelPreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = osRtxKernelPreInit &rArr; EventRecorderInitialize &rArr; EventRecorderStart
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderDisable
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderEnable
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[346]"></a>osRtxMemoryAlloc</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, rtx_memory.o(.text.osRtxMemoryAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerNew
</UL>

<P><STRONG><a name="[347]"></a>osRtxMemoryFree</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, rtx_memory.o(.text.osRtxMemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osRtxMemoryFree &rArr; EvrRtxMemoryFree &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[348]"></a>osRtxMemoryInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, rtx_memory.o(.text.osRtxMemoryInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osRtxMemoryInit &rArr; EvrRtxMemoryInit &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[342]"></a>osRtxMemoryPoolAlloc</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, rtx_mempool.o(.text.osRtxMemoryPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osRtxMemoryPoolAlloc &rArr; EvrRtxMemoryBlockAlloc &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerNew
</UL>

<P><STRONG><a name="[349]"></a>osRtxMemoryPoolFree</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, rtx_mempool.o(.text.osRtxMemoryPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osRtxMemoryPoolFree &rArr; EvrRtxMemoryBlockFree &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockFree
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[34a]"></a>osRtxMemoryPoolInit</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, rtx_mempool.o(.text.osRtxMemoryPoolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osRtxMemoryPoolInit &rArr; EvrRtxMemoryBlockInit &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[34e]"></a>osRtxMessageQueueTimerSetup</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rtx_msgqueue.o(.text.osRtxMessageQueueTimerSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = osRtxMessageQueueTimerSetup &rArr; svcRtxMessageQueueNew &rArr; osRtxMemoryPoolInit &rArr; EvrRtxMemoryBlockInit &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerSetup
</UL>

<P><STRONG><a name="[350]"></a>osRtxMutexOwnerRelease</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, rtx_mutex.o(.text.osRtxMutexOwnerRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; EvrRtxThreadSwitched &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexReleased
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[351]"></a>osRtxMutexOwnerRestore</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, rtx_mutex.o(.text.osRtxMutexOwnerRestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxMutexOwnerRestore
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[129]"></a>osRtxPendSV_Handler</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxPendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; EvrRtxThreadSwitched &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[340]"></a>osRtxPostProcess</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>

<P><STRONG><a name="[354]"></a>osRtxThreadDelayTick</STRONG> (Thumb, 352 bytes, Stack size 32 bytes, rtx_thread.o(.text.osRtxThreadDelayTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osRtxThreadDelayTick &rArr; EvrRtxMessageQueueGetTimeout &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRestore
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetTimeout
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutTimeout
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolAllocTimeout
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquireTimeout
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquireTimeout
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayCompleted
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitTimeout
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadUnblocked
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[353]"></a>osRtxThreadDispatch</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osRtxThreadDispatch &rArr; EvrRtxThreadSwitched &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSwitched
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadPreempted
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>

<P><STRONG><a name="[34b]"></a>osRtxThreadListGet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListGet))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[360]"></a>osRtxThreadListPut</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListPut))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
</UL>

<P><STRONG><a name="[35a]"></a>osRtxThreadListRemove</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[352]"></a>osRtxThreadListSort</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListSort))
<BR><BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRestore
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[35b]"></a>osRtxThreadReadyPut</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadReadyPut))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[34d]"></a>osRtxThreadRegPtr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadRegPtr))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[127]"></a>osRtxThreadStackCheck</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadStackCheck))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[356]"></a>osRtxThreadStartup</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadStartup))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxMemoryPoolFree &rArr; EvrRtxMemoryBlockFree &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[357]"></a>osRtxThreadSwitch</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osRtxThreadSwitch &rArr; EvrRtxThreadSwitched &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSwitched
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[358]"></a>osRtxThreadWaitEnter</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, rtx_thread.o(.text.osRtxThreadWaitEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osRtxThreadWaitEnter &rArr; EvrRtxThreadSwitched &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSwitched
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadBlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
</UL>

<P><STRONG><a name="[34c]"></a>osRtxThreadWaitExit</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadWaitExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; EvrRtxThreadSwitched &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadUnblocked
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[12a]"></a>osRtxTick_Handler</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osRtxTick_Handler &rArr; osRtxThreadDelayTick &rArr; EvrRtxMessageQueueGetTimeout &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_AcknowledgeIRQ
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadPreempted
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[9a]"></a>osRtxTimerSetup</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rtx_timer.o(.text.osRtxTimerSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = osRtxTimerSetup &rArr; osRtxMessageQueueTimerSetup &rArr; svcRtxMessageQueueNew &rArr; osRtxMemoryPoolInit &rArr; EvrRtxMemoryBlockInit &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueTimerSetup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_lib.o(.rodata)
</UL>
<P><STRONG><a name="[99]"></a>osRtxTimerThread</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rtx_timer.o(.text.osRtxTimerThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osRtxTimerThread &rArr; osMessageQueueGet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_lib.o(.rodata)
</UL>
<P><STRONG><a name="[335]"></a>osSemaphoreAcquire</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.osSemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osSemaphoreAcquire &rArr; EvrRtxSemaphoreNotAcquired &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreNotAcquired
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquired
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquire
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_lock
</UL>

<P><STRONG><a name="[334]"></a>osSemaphoreNew</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.osSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osSemaphoreNew &rArr; EvrRtxSemaphoreNew &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreNew
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_create
</UL>

<P><STRONG><a name="[336]"></a>osSemaphoreRelease</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreReleased
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreRelease
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_unlock
</UL>

<P><STRONG><a name="[97]"></a>osThreadExit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osThreadExit &rArr; EvrRtxThreadExit &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadExit
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[337]"></a>osThreadFlagsClear</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rtx_thread.o(.text.osThreadFlagsClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osThreadFlagsClear &rArr; EvrRtxThreadFlagsClear &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsClear
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsError
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_clear
</UL>

<P><STRONG><a name="[338]"></a>osThreadFlagsSet</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, rtx_thread.o(.text.osThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsSetDone
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsSet
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsError
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thrBUT
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_set
</UL>

<P><STRONG><a name="[339]"></a>osThreadFlagsWait</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rtx_thread.o(.text.osThreadFlagsWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osThreadFlagsWait &rArr; EvrRtxThreadFlagsWait &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWait
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsError
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thrLED
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_wait
</UL>

<P><STRONG><a name="[254]"></a>osThreadGetId</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rtx_thread.o(.text.osThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osThreadGetId &rArr; EvrRtxThreadGetId &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadGetId
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>

<P><STRONG><a name="[261]"></a>osThreadNew</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rtx_thread.o(.text.osThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osThreadNew &rArr; EvrRtxThreadNew &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadNew
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_create
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_thread_create
</UL>

<P><STRONG><a name="[33b]"></a>osThreadYield</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rtx_thread.o(.text.osThreadYield))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osThreadYield &rArr; EvrRtxThreadYield &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadYield
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_thread_pass
</UL>

<P><STRONG><a name="[33c]"></a>osTimerNew</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, rtx_timer.o(.text.osTimerNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osTimerNew &rArr; EvrRtxTimerNew &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerNew
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerError
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_timer_create
</UL>

<P><STRONG><a name="[33d]"></a>osTimerStart</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, rtx_timer.o(.text.osTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osTimerStart &rArr; EvrRtxTimerStart &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerStart
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerError
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_timer_start
</UL>

<P><STRONG><a name="[263]"></a>send_udp_data</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, blinky.o(.text.send_udp_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = send_udp_data &rArr; netUDP_Send &rArr; net_udp_send_if &rArr; net_ip6_send_frame &rArr; net_ip6_frag_get &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netUDP_Send
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netUDP_GetBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[2a1]"></a>stdout_init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stdout_usart.o(.text.stdout_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stdout_init
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25b]"></a>stdout_putchar</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, stdout_usart.o(.text.stdout_putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = stdout_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[71]"></a>thrLED</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, blinky.o(.text.thrLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = thrLED &rArr; osThreadFlagsWait &rArr; EvrRtxThreadFlagsWait &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blinky.o(.text.app_main)
</UL>
<P><STRONG><a name="[70]"></a>udp_cb_func</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, blinky.o(.text.udp_cb_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = udp_cb_func &rArr; LED_SetOut
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SetOut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blinky.o(.text.app_main)
</UL>
<P><STRONG><a name="[144]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[364]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[363]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[365]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[366]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[145]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; __btod_div_common
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[146]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[367]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[148]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[132]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[6f]"></a>_fputc$unlocked</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _fputc$unlocked &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file_locked.o(.text)
</UL>
<P><STRONG><a name="[113]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[6e]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[17c]"></a>$Super$$_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[3a9]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[3aa]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[ee]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[f2]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[72]"></a>thrBUT</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, blinky.o(.text.thrBUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = thrBUT &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buttons_GetState
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blinky.o(.text.app_main)
</UL>
<P><STRONG><a name="[7b]"></a>svcRtxDelay</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rtx_delay.o(.text.svcRtxDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcRtxDelay &rArr; osRtxThreadWaitEnter &rArr; EvrRtxThreadSwitched &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayStarted
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_delay.o(.text.osDelay)
</UL>
<P><STRONG><a name="[7f]"></a>svcRtxKernelInitialize</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, rtx_kernel.o(.text.svcRtxKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = svcRtxKernelInitialize &rArr; osRtxMemoryPoolInit &rArr; EvrRtxMemoryBlockInit &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialized
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelInitialize)
</UL>
<P><STRONG><a name="[7c]"></a>svcRtxKernelGetState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_kernel.o(.text.svcRtxKernelGetState))
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetState)
</UL>
<P><STRONG><a name="[80]"></a>svcRtxKernelStart</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, rtx_kernel.o(.text.svcRtxKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = svcRtxKernelStart &rArr; osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxMemoryPoolFree &rArr; EvrRtxMemoryBlockFree &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetIRQn
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Setup
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStarted
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelStart)
</UL>
<P><STRONG><a name="[7d]"></a>svcRtxKernelGetTickCount</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_kernel.o(.text.svcRtxKernelGetTickCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetTickCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetTickCount)
</UL>
<P><STRONG><a name="[7e]"></a>svcRtxKernelGetTickFreq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtx_kernel.o(.text.svcRtxKernelGetTickFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcRtxKernelGetTickFreq &rArr; EvrRtxKernelGetTickFreq &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetTickFreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetTickFreq)
</UL>
<P><STRONG><a name="[34f]"></a>svcRtxMessageQueueNew</STRONG> (Thumb, 390 bytes, Stack size 40 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = svcRtxMessageQueueNew &rArr; osRtxMemoryPoolInit &rArr; EvrRtxMemoryBlockInit &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueCreated
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueTimerSetup
</UL>

<P><STRONG><a name="[95]"></a>osRtxMessageQueuePostProcess</STRONG> (Thumb, 442 bytes, Stack size 32 bytes, rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osRtxMessageQueuePostProcess &rArr; osRtxMemoryPoolFree &rArr; EvrRtxMemoryBlockFree &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
</UL>
<P><STRONG><a name="[82]"></a>svcRtxMessageQueuePut</STRONG> (Thumb, 330 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = svcRtxMessageQueuePut &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; EvrRtxThreadSwitched &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotInserted
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutTimeout
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutPending
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueuePut)
</UL>
<P><STRONG><a name="[81]"></a>svcRtxMessageQueueGet</STRONG> (Thumb, 456 bytes, Stack size 32 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = svcRtxMessageQueueGet &rArr; osRtxMemoryPoolFree &rArr; EvrRtxMemoryBlockFree &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotRetrieved
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetTimeout
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetPending
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueueGet)
</UL>
<P><STRONG><a name="[85]"></a>svcRtxMutexNew</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = svcRtxMutexNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexCreated
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexNew)
</UL>
<P><STRONG><a name="[83]"></a>svcRtxMutexAcquire</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = svcRtxMutexAcquire &rArr; osRtxThreadWaitEnter &rArr; EvrRtxThreadSwitched &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexNotAcquired
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquireTimeout
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquirePending
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexAcquire)
</UL>
<P><STRONG><a name="[86]"></a>svcRtxMutexRelease</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = svcRtxMutexRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; EvrRtxThreadSwitched &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexReleased
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexRelease)
</UL>
<P><STRONG><a name="[84]"></a>svcRtxMutexDelete</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = svcRtxMutexDelete &rArr; osRtxMemoryPoolFree &rArr; EvrRtxMemoryBlockFree &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexDestroyed
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexDelete)
</UL>
<P><STRONG><a name="[8a]"></a>svcRtxSemaphoreNew</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = svcRtxSemaphoreNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreCreated
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreNew)
</UL>
<P><STRONG><a name="[89]"></a>svcRtxSemaphoreAcquire</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = svcRtxSemaphoreAcquire &rArr; osRtxThreadWaitEnter &rArr; EvrRtxThreadSwitched &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreNotAcquired
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquired
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquireTimeout
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquirePending
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreAcquire)
</UL>
<P><STRONG><a name="[8b]"></a>svcRtxSemaphoreRelease</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = svcRtxSemaphoreRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; EvrRtxThreadSwitched &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreReleased
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquired
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreRelease)
</UL>
<P><STRONG><a name="[96]"></a>osRtxSemaphorePostProcess</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, rtx_semaphore.o(.text.osRtxSemaphorePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osRtxSemaphorePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; EvrRtxThreadSwitched &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquired
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.svcRtxSemaphoreNew)
</UL>
<P><STRONG><a name="[91]"></a>svcRtxThreadNew</STRONG> (Thumb, 576 bytes, Stack size 40 bytes, rtx_thread.o(.text.svcRtxThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = svcRtxThreadNew &rArr; osRtxMemoryPoolFree &rArr; EvrRtxMemoryBlockFree &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadCreated
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadNew)
</UL>
<P><STRONG><a name="[98]"></a>osRtxThreadPostProcess</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osRtxThreadPostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; EvrRtxThreadSwitched &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitCompleted
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[90]"></a>svcRtxThreadGetId</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtx_thread.o(.text.svcRtxThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcRtxThreadGetId &rArr; EvrRtxThreadGetId &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadGetId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadGetId)
</UL>
<P><STRONG><a name="[92]"></a>svcRtxThreadYield</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadYield))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = svcRtxThreadYield &rArr; EvrRtxThreadSwitched &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSwitched
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadPreempted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadYield)
</UL>
<P><STRONG><a name="[8c]"></a>svcRtxThreadExit</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = svcRtxThreadExit &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; EvrRtxThreadSwitched &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadDestroyed
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSwitched
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadJoined
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadExit)
</UL>
<P><STRONG><a name="[8e]"></a>svcRtxThreadFlagsSet</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = svcRtxThreadFlagsSet &rArr; EvrRtxThreadFlagsWaitCompleted &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitCompleted
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsSetDone
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsError
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadUnblocked
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadFlagsSet)
</UL>
<P><STRONG><a name="[8d]"></a>svcRtxThreadFlagsClear</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, rtx_thread.o(.text.svcRtxThreadFlagsClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcRtxThreadFlagsClear &rArr; EvrRtxThreadFlagsClearDone &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsClearDone
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadFlagsClear)
</UL>
<P><STRONG><a name="[8f]"></a>svcRtxThreadFlagsWait</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, rtx_thread.o(.text.svcRtxThreadFlagsWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = svcRtxThreadFlagsWait &rArr; EvrRtxThreadFlagsWaitCompleted &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitNotCompleted
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitCompleted
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitTimeout
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitPending
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsError
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadFlagsWait)
</UL>
<P><STRONG><a name="[355]"></a>osRtxThreadFree</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osRtxThreadFree &rArr; osRtxMemoryPoolFree &rArr; EvrRtxMemoryBlockFree &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[88]"></a>osRtxTimerTick</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, rtx_timer.o(.text.osRtxTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osRtxTimerTick &rArr; osMessageQueuePut &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osRtxTimerSetup)
</UL>
<P><STRONG><a name="[93]"></a>svcRtxTimerNew</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, rtx_timer.o(.text.svcRtxTimerNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = svcRtxTimerNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerCreated
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerError
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osTimerNew)
</UL>
<P><STRONG><a name="[94]"></a>svcRtxTimerStart</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, rtx_timer.o(.text.svcRtxTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcRtxTimerStart &rArr; EvrRtxTimerStarted &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerStarted
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osTimerStart)
</UL>
<P><STRONG><a name="[ac]"></a>GetVersion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, phy_lan8742a.o(.text.GetVersion))
<BR>[Address Reference Count : 1]<UL><LI> phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
</UL>
<P><STRONG><a name="[ad]"></a>Initialize</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, phy_lan8742a.o(.text.Initialize))
<BR>[Address Reference Count : 1]<UL><LI> phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
</UL>
<P><STRONG><a name="[ae]"></a>Uninitialize</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, phy_lan8742a.o(.text.Uninitialize))
<BR>[Address Reference Count : 1]<UL><LI> phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
</UL>
<P><STRONG><a name="[af]"></a>PowerControl</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, phy_lan8742a.o(.text.PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
</UL>
<P><STRONG><a name="[b0]"></a>SetInterface</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, phy_lan8742a.o(.text.SetInterface))
<BR>[Address Reference Count : 1]<UL><LI> phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
</UL>
<P><STRONG><a name="[b1]"></a>SetMode</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, phy_lan8742a.o(.text.SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
</UL>
<P><STRONG><a name="[b2]"></a>GetLinkState</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, phy_lan8742a.o(.text.GetLinkState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetLinkState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
</UL>
<P><STRONG><a name="[b3]"></a>GetLinkInfo</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, phy_lan8742a.o(.text.GetLinkInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetLinkInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
</UL>
<P><STRONG><a name="[9b]"></a>GetVersion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, emac_stm32f7xx.o(.text.GetVersion))
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[9c]"></a>GetCapabilities</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, emac_stm32f7xx.o(.text.GetCapabilities))
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[9d]"></a>Initialize</STRONG> (Thumb, 336 bytes, Stack size 56 bytes, emac_stm32f7xx.o(.text.Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Initialize &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[9e]"></a>Uninitialize</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, emac_stm32f7xx.o(.text.Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Uninitialize &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[9f]"></a>PowerControl</STRONG> (Thumb, 522 bytes, Stack size 16 bytes, emac_stm32f7xx.o(.text.PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PowerControl
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[a0]"></a>GetMacAddress</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, emac_stm32f7xx.o(.text.GetMacAddress))
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[a1]"></a>SetMacAddress</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, emac_stm32f7xx.o(.text.SetMacAddress))
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[a2]"></a>SetAddressFilter</STRONG> (Thumb, 306 bytes, Stack size 20 bytes, emac_stm32f7xx.o(.text.SetAddressFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetAddressFilter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[a3]"></a>SendFrame</STRONG> (Thumb, 484 bytes, Stack size 16 bytes, emac_stm32f7xx.o(.text.SendFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SendFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[a4]"></a>ReadFrame</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, emac_stm32f7xx.o(.text.ReadFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ReadFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[a5]"></a>GetRxFrameSize</STRONG> (Thumb, 140 bytes, Stack size 4 bytes, emac_stm32f7xx.o(.text.GetRxFrameSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GetRxFrameSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[a6]"></a>GetRxFrameTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, emac_stm32f7xx.o(.text.GetRxFrameTime))
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[a7]"></a>GetTxFrameTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, emac_stm32f7xx.o(.text.GetTxFrameTime))
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[a8]"></a>ControlTimer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, emac_stm32f7xx.o(.text.ControlTimer))
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[a9]"></a>Control</STRONG> (Thumb, 340 bytes, Stack size 24 bytes, emac_stm32f7xx.o(.text.Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Control &rArr; init_dma
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dma
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[181]"></a>init_dma</STRONG> (Thumb, 322 bytes, Stack size 24 bytes, emac_stm32f7xx.o(.text.init_dma))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = init_dma
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control
</UL>

<P><STRONG><a name="[aa]"></a>PHY_Read</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, emac_stm32f7xx.o(.text.PHY_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PHY_Read &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[ab]"></a>PHY_Write</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, emac_stm32f7xx.o(.text.PHY_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PHY_Write &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f7xx.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[b4]"></a>USARTx_GetVersion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usart_stm32f7xx.o(.text.USARTx_GetVersion))
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f7xx.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[b5]"></a>USART1_GetCapabilities</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usart_stm32f7xx.o(.text.USART1_GetCapabilities))
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f7xx.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[b6]"></a>USART1_Initialize</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, usart_stm32f7xx.o(.text.USART1_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = USART1_Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f7xx.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[b7]"></a>USART1_Uninitialize</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, usart_stm32f7xx.o(.text.USART1_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = USART1_Uninitialize &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f7xx.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[b8]"></a>USART1_PowerControl</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usart_stm32f7xx.o(.text.USART1_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = USART1_PowerControl &rArr; USART_PowerControl
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f7xx.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[252]"></a>USART_PowerControl</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, usart_stm32f7xx.o(.text.USART_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = USART_PowerControl
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_PowerControl
</UL>

<P><STRONG><a name="[b9]"></a>USART1_Send</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, usart_stm32f7xx.o(.text.USART1_Send))
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f7xx.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[ba]"></a>USART1_Receive</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, usart_stm32f7xx.o(.text.USART1_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART1_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f7xx.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[bb]"></a>USART1_Transfer</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, usart_stm32f7xx.o(.text.USART1_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f7xx.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[bc]"></a>USART1_GetTxCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usart_stm32f7xx.o(.text.USART1_GetTxCount))
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f7xx.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[bd]"></a>USART1_GetRxCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usart_stm32f7xx.o(.text.USART1_GetRxCount))
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f7xx.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[be]"></a>USART1_Control</STRONG> (Thumb, 1632 bytes, Stack size 56 bytes, usart_stm32f7xx.o(.text.USART1_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USART1_Control &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f7xx.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[bf]"></a>USART1_GetStatus</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, usart_stm32f7xx.o(.text.USART1_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f7xx.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[c0]"></a>USART1_SetModemControl</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, usart_stm32f7xx.o(.text.USART1_SetModemControl))
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f7xx.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[c1]"></a>USART1_GetModemStatus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart_stm32f7xx.o(.text.USART1_GetModemStatus))
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f7xx.o(.rodata.Driver_USART1)
</UL>
<P><STRONG><a name="[c2]"></a>eth0_callback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, net_config.o(.text.eth0_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = eth0_callback &rArr; net_eth_callback &rArr; netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.eth0_ll_config)
</UL>
<P><STRONG><a name="[22b]"></a>eth_lock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_eth.o(.text.eth_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = eth_lock &rArr; netif_lock &rArr; osSemaphoreAcquire &rArr; EvrRtxSemaphoreNotAcquired &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>

<P><STRONG><a name="[2b7]"></a>eth_check_link</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, net_eth.o(.text.eth_check_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eth_check_link
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
</UL>

<P><STRONG><a name="[21b]"></a>eth_unlock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_eth.o(.text.eth_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>

<P><STRONG><a name="[2ec]"></a>eth_if_map</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, net_eth.o(.text.eth_if_map))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_get_option
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_output
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_config_mcast
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>

<P><STRONG><a name="[2ef]"></a>eth_opt_len</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, net_eth.o(.text.eth_opt_len))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_get_option
</UL>

<P><STRONG><a name="[26e]"></a>debug_inf2</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, net_eth.o(.text.debug_inf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = debug_inf2 &rArr; OUTLINED_FUNCTION_0 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mac_ntoa
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[1ed]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_eth.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[201]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_eth.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_get_option
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>

<P><STRONG><a name="[21a]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_eth.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_output
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_config_mcast
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
</UL>

<P><STRONG><a name="[22a]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_eth.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; eth_lock &rArr; netif_lock &rArr; osSemaphoreAcquire &rArr; EvrRtxSemaphoreNotAcquired &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_output
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_config_mcast
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
</UL>

<P><STRONG><a name="[230]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_eth.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
</UL>

<P><STRONG><a name="[2f1]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net_eth.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
</UL>

<P><STRONG><a name="[2f2]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net_eth.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
</UL>

<P><STRONG><a name="[269]"></a>debug_info</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, net_arp.o(.text.debug_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = debug_info &rArr; OUTLINED_FUNCTION_1 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mac_ntoa
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_ntoa
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
</UL>

<P><STRONG><a name="[2de]"></a>arp_sender_valid</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, net_arp.o(.text.arp_sender_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arp_sender_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
</UL>

<P><STRONG><a name="[267]"></a>arp_send_reply</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, net_arp.o(.text.arp_send_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = arp_send_reply &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
</UL>

<P><STRONG><a name="[264]"></a>arp_proc_response</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, net_arp.o(.text.arp_proc_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = arp_proc_response &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
</UL>

<P><STRONG><a name="[26a]"></a>arp_send_request</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, net_arp.o(.text.arp_send_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = arp_send_request &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_probe
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_notify
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_enqueue
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_run
</UL>

<P><STRONG><a name="[2d3]"></a>arp_is_cacheable</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, net_arp.o(.text.arp_is_cacheable))
<BR><BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
</UL>

<P><STRONG><a name="[243]"></a>debug_inf2</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, net_arp.o(.text.debug_inf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = debug_inf2 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mac_ntoa
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_ntoa
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_run
</UL>

<P><STRONG><a name="[2d5]"></a>arp_cache_alloc</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, net_arp.o(.text.arp_cache_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = arp_cache_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_find
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
</UL>

<P><STRONG><a name="[266]"></a>arp_que_free</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, net_arp.o(.text.arp_que_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = arp_que_free &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_find
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_run
</UL>

<P><STRONG><a name="[1ee]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_arp.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_find
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_run
</UL>

<P><STRONG><a name="[203]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_arp.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_find
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_run
</UL>

<P><STRONG><a name="[21c]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_arp.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_find
</UL>

<P><STRONG><a name="[237]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_arp.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_5 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_init
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_enqueue
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_run
</UL>

<P><STRONG><a name="[23c]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_arp.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_6 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_find
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_run
</UL>

<P><STRONG><a name="[242]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_arp.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_7 &rArr; debug_inf2 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_find
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
</UL>

<P><STRONG><a name="[248]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_arp.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_8 &rArr; debug_inf2 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
</UL>

<P><STRONG><a name="[2d9]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_arp.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_run
</UL>

<P><STRONG><a name="[2d8]"></a>OUTLINED_FUNCTION_10</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_arp.o(.text.OUTLINED_FUNCTION_10))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_run
</UL>

<P><STRONG><a name="[31e]"></a>ndp_check_frame</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, net_ndp.o(.text.ndp_check_frame))
<BR><BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
</UL>

<P><STRONG><a name="[2aa]"></a>ndp_cache_add</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, net_ndp.o(.text.ndp_cache_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = ndp_cache_add &rArr; OUTLINED_FUNCTION_6 &rArr; debug_inf2 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_comp
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_cache_alloc
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
</UL>

<P><STRONG><a name="[2ae]"></a>ndp_send_reply</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, net_ndp.o(.text.ndp_send_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = ndp_send_reply &rArr; net_icmp6_send &rArr; net_ip6_send_frame &rArr; net_ip6_frag_get &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
</UL>

<P><STRONG><a name="[23e]"></a>debug_inf2</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, net_ndp.o(.text.debug_inf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = debug_inf2 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mac_ntoa
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_ntoa
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_cache_add
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_refresh
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_run
</UL>

<P><STRONG><a name="[2ab]"></a>ndp_cache_alloc</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, net_ndp.o(.text.ndp_cache_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ndp_cache_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_cache_add
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_find
</UL>

<P><STRONG><a name="[2ac]"></a>ndp_que_free</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, net_ndp.o(.text.ndp_que_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ndp_que_free &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_find
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_run
</UL>

<P><STRONG><a name="[2b0]"></a>ndp_send_request</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, net_ndp.o(.text.ndp_send_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = ndp_send_request &rArr; net_icmp6_send &rArr; net_ip6_send_frame &rArr; net_ip6_frag_get &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_get_local
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_enqueue
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_run
</UL>

<P><STRONG><a name="[2ad]"></a>ndp_router_remove</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, net_ndp.o(.text.ndp_router_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ndp_router_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_run
</UL>

<P><STRONG><a name="[1ef]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_ndp.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_request
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_cache_add
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_find
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_run
</UL>

<P><STRONG><a name="[204]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_ndp.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_request
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_cache_add
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_find
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_run
</UL>

<P><STRONG><a name="[21d]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_ndp.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_cache_add
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_find
</UL>

<P><STRONG><a name="[22c]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_ndp.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_cache_add
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_enqueue
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_refresh
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_run
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_init
</UL>

<P><STRONG><a name="[232]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_ndp.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_cache_add
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_run
</UL>

<P><STRONG><a name="[238]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_ndp.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_5 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_cache_add
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_find
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_run
</UL>

<P><STRONG><a name="[23d]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_ndp.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_6 &rArr; debug_inf2 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_cache_add
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_run
</UL>

<P><STRONG><a name="[24a]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_ndp.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_9 &rArr; debug_inf2 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_find
</UL>

<P><STRONG><a name="[20c]"></a>OUTLINED_FUNCTION_10</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_ndp.o(.text.OUTLINED_FUNCTION_10))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OUTLINED_FUNCTION_10 &rArr; net_addr6_ntoa &rArr; ip6_ntoa &rArr; ip4_ntoa &rArr; net_itoa &rArr; i2str &rArr; ul2str
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_ntoa
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_request
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_reply
</UL>

<P><STRONG><a name="[20e]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_ndp.o(.text.OUTLINED_FUNCTION_11))
<BR><BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_refresh
</UL>

<P><STRONG><a name="[31d]"></a>OUTLINED_FUNCTION_12</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_ndp.o(.text.OUTLINED_FUNCTION_12))
<BR><BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_run
</UL>

<P><STRONG><a name="[212]"></a>OUTLINED_FUNCTION_13</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_ndp.o(.text.OUTLINED_FUNCTION_13))
<BR><BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
</UL>

<P><STRONG><a name="[214]"></a>OUTLINED_FUNCTION_14</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net_ndp.o(.text.OUTLINED_FUNCTION_14))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_14 &rArr; net_addr6_create
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_create
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_run
</UL>

<P><STRONG><a name="[275]"></a>debug_info</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, net_loopback.o(.text.debug_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = debug_info &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_send_frame
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
</UL>

<P><STRONG><a name="[1f1]"></a>que_free_list</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, net_ip4_frag.o(.text.que_free_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = que_free_list &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[1f0]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_ip4_frag.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; que_free_list &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_free_list
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_add
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_run
</UL>

<P><STRONG><a name="[205]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net_ip4_frag.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_init
</UL>

<P><STRONG><a name="[276]"></a>debug_info</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, net_icmp.o(.text.debug_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = debug_info &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
</UL>

<P><STRONG><a name="[1f2]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_icmp.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
</UL>

<P><STRONG><a name="[1f4]"></a>que_free_list</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, net_ip6_frag.o(.text.que_free_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = que_free_list &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[1f3]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_ip6_frag.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; que_free_list &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_free_list
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_frag_add
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_frag_run
</UL>

<P><STRONG><a name="[206]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net_ip6_frag.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_frag_init
</UL>

<P><STRONG><a name="[277]"></a>debug_info</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, net_icmp6.o(.text.debug_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = debug_info &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
</UL>

<P><STRONG><a name="[1f5]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_icmp6.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
</UL>

<P><STRONG><a name="[330]"></a>udp_port_in_use</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, net_udp.o(.text.udp_port_in_use))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_port_in_use
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_open
</UL>

<P><STRONG><a name="[331]"></a>debug_info</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, net_udp.o(.text.debug_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = debug_info
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_process
</UL>

<P><STRONG><a name="[1f6]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_udp.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_socket
</UL>

<P><STRONG><a name="[207]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_udp.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
</UL>

<P><STRONG><a name="[21e]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_udp.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_open
</UL>

<P><STRONG><a name="[22d]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_udp.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; net_sys_unlock &rArr; netos_unlock &rArr; osMutexRelease &rArr; EvrRtxMutexRelease &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netUDP_Open
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netUDP_GetSocket
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netUDP_Send
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netUDP_GetBuffer
</UL>

<P><STRONG><a name="[332]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, net_udp.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
</UL>

<P><STRONG><a name="[23f]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net_udp.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_6 &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_open
</UL>

<P><STRONG><a name="[244]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_udp.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OUTLINED_FUNCTION_7 &rArr; net_sys_lock &rArr; netos_lock &rArr; osMutexAcquire &rArr; EvrRtxMutexAcquire &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netUDP_GetSocket
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netUDP_GetBuffer
</UL>

<P><STRONG><a name="[278]"></a>debug_info</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, net_tcp.o(.text.debug_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = debug_info &rArr; OUTLINED_FUNCTION_22 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_22
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[211]"></a>tcp_send_ctrl</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, net_tcp.o(.text.tcp_send_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = tcp_send_ctrl &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_ip6_frag_get &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
</UL>

<P><STRONG><a name="[328]"></a>tcp_transit</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, net_tcp.o(.text.tcp_transit))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = tcp_transit &rArr; tcp_que_free &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
</UL>

<P><STRONG><a name="[361]"></a>tcp_send_data</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, net_tcp.o(.text.tcp_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = tcp_send_data &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_ip6_frag_get &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_resend
</UL>

<P><STRONG><a name="[32e]"></a>tcp_que_resend</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, net_tcp.o(.text.tcp_que_resend))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = tcp_que_resend &rArr; tcp_send_data &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_ip6_frag_get &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_data
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
</UL>

<P><STRONG><a name="[32b]"></a>tcp_que_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, net_tcp.o(.text.tcp_que_init))
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
</UL>

<P><STRONG><a name="[32f]"></a>tcp_que_free</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, net_tcp.o(.text.tcp_que_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = tcp_que_free &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
</UL>

<P><STRONG><a name="[271]"></a>debug_inf2</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, net_tcp.o(.text.debug_inf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = debug_inf2 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[320]"></a>tcp_send_reset</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, net_tcp.o(.text.tcp_send_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = tcp_send_reset &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_ip6_frag_get &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[227]"></a>tcp_parse_opt</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, net_tcp.o(.text.tcp_parse_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = tcp_parse_opt &rArr; OUTLINED_FUNCTION_4 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_24
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_23
</UL>

<P><STRONG><a name="[322]"></a>tcp_set_cwnd</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, net_tcp.o(.text.tcp_set_cwnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tcp_set_cwnd &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[362]"></a>tcp_write</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, net_tcp.o(.text.tcp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = tcp_write &rArr; net_ip6_send_frame &rArr; net_ip6_frag_get &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_tx_offl_hl
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_send_frame
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_chksum
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_tx_offl_hl
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_get_local
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_data
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>

<P><STRONG><a name="[1f7]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_tcp.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
</UL>

<P><STRONG><a name="[208]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_tcp.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_listen
</UL>

<P><STRONG><a name="[21f]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_tcp.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[233]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_tcp.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parse_opt
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_resend
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_data
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_init
</UL>

<P><STRONG><a name="[239]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_tcp.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_5 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[24b]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_tcp.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_9 &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[324]"></a>OUTLINED_FUNCTION_10</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, net_tcp.o(.text.OUTLINED_FUNCTION_10))
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[327]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, net_tcp.o(.text.OUTLINED_FUNCTION_11))
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[210]"></a>OUTLINED_FUNCTION_12</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net_tcp.o(.text.OUTLINED_FUNCTION_12))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_12 &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_ip6_frag_get &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[218]"></a>OUTLINED_FUNCTION_15</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_tcp.o(.text.OUTLINED_FUNCTION_15))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_15 &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_ip6_frag_get &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_resend
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
</UL>

<P><STRONG><a name="[32d]"></a>OUTLINED_FUNCTION_16</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, net_tcp.o(.text.OUTLINED_FUNCTION_16))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
</UL>

<P><STRONG><a name="[32a]"></a>OUTLINED_FUNCTION_17</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net_tcp.o(.text.OUTLINED_FUNCTION_17))
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[326]"></a>OUTLINED_FUNCTION_18</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net_tcp.o(.text.OUTLINED_FUNCTION_18))
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[32c]"></a>OUTLINED_FUNCTION_19</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, net_tcp.o(.text.OUTLINED_FUNCTION_19))
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[321]"></a>OUTLINED_FUNCTION_20</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_tcp.o(.text.OUTLINED_FUNCTION_20))
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[325]"></a>OUTLINED_FUNCTION_21</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net_tcp.o(.text.OUTLINED_FUNCTION_21))
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[225]"></a>OUTLINED_FUNCTION_22</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_tcp.o(.text.OUTLINED_FUNCTION_22))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_22 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
</UL>

<P><STRONG><a name="[226]"></a>OUTLINED_FUNCTION_23</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_tcp.o(.text.OUTLINED_FUNCTION_23))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_23 &rArr; tcp_parse_opt &rArr; OUTLINED_FUNCTION_4 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parse_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[228]"></a>OUTLINED_FUNCTION_24</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_tcp.o(.text.OUTLINED_FUNCTION_24))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_24 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parse_opt
</UL>

<P><STRONG><a name="[329]"></a>OUTLINED_FUNCTION_25</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_tcp.o(.text.OUTLINED_FUNCTION_25))
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
</UL>

<P><STRONG><a name="[323]"></a>OUTLINED_FUNCTION_26</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_tcp.o(.text.OUTLINED_FUNCTION_26))
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[229]"></a>OUTLINED_FUNCTION_27</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_tcp.o(.text.OUTLINED_FUNCTION_27))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_27 &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[26b]"></a>bsd_evt_send</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, net_bsd.o(.text.bsd_evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bsd_evt_send &rArr; net_sys_resume &rArr; netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_resume
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_bsd_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_bsd_socket_run
</UL>

<P><STRONG><a name="[76]"></a>dhcp_listener</STRONG> (Thumb, 920 bytes, Stack size 40 bytes, net_dhcp_client.o(.text.dhcp_listener))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = dhcp_listener &rArr; dhcp_send_message &rArr; net_udp_send_if &rArr; net_ip6_send_frame &rArr; net_ip6_frag_get &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_notify
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_ntoa
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_renew
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_req
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_selected
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_sel
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_dhcp_client.o(.text.net_dhcp_client_init)
</UL>
<P><STRONG><a name="[287]"></a>dhcp_client_start</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, net_dhcp_client.o(.text.dhcp_client_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = dhcp_client_start &rArr; net_udp_open &rArr; OUTLINED_FUNCTION_6 &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_open
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_enable_lla
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_rand32
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_client_init
</UL>

<P><STRONG><a name="[23b]"></a>dhcp_send_message</STRONG> (Thumb, 528 bytes, Stack size 40 bytes, net_dhcp_client.o(.text.dhcp_send_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = dhcp_send_message &rArr; net_udp_send_if &rArr; net_ip6_send_frame &rArr; net_ip6_frag_get &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_buf
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_strcpy
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_client_run
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
</UL>

<P><STRONG><a name="[272]"></a>debug_inf2</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, net_dhcp_client.o(.text.debug_inf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = debug_inf2 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_ntoa
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_client_run
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_renew
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_req
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_sel
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
</UL>

<P><STRONG><a name="[289]"></a>proc_opt_sel</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, net_dhcp_client.o(.text.proc_opt_sel))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = proc_opt_sel &rArr; debug_inf2 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
</UL>

<P><STRONG><a name="[28a]"></a>is_selected</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, net_dhcp_client.o(.text.is_selected))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
</UL>

<P><STRONG><a name="[28b]"></a>proc_opt_req</STRONG> (Thumb, 404 bytes, Stack size 40 bytes, net_dhcp_client.o(.text.proc_opt_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = proc_opt_req &rArr; netDHCP_Notify &rArr; netIF_GetOption &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netDHCP_Notify
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_ntoa
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
</UL>

<P><STRONG><a name="[28c]"></a>proc_opt_renew</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, net_dhcp_client.o(.text.proc_opt_renew))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = proc_opt_renew &rArr; debug_inf2 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
</UL>

<P><STRONG><a name="[1f8]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_dhcp_client.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_client_run
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_client_init
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_renew
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_req
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_start
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
</UL>

<P><STRONG><a name="[209]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_dhcp_client.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
</UL>

<P><STRONG><a name="[220]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net_dhcp_client.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; netDHCP_Notify &rArr; netIF_GetOption &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netDHCP_Notify
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_client_run
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
</UL>

<P><STRONG><a name="[2e8]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net_dhcp_client.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_client_run
</UL>

<P><STRONG><a name="[35c]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_dhcp_client.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_req
</UL>

<P><STRONG><a name="[23a]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_dhcp_client.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_5 &rArr; dhcp_send_message &rArr; net_udp_send_if &rArr; net_ip6_send_frame &rArr; net_ip6_frag_get &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_client_run
</UL>

<P><STRONG><a name="[2ea]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_dhcp_client.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_client_run
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_req
</UL>

<P><STRONG><a name="[246]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_dhcp_client.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_7 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_client_init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
</UL>

<P><STRONG><a name="[249]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_dhcp_client.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_8 &rArr; dhcp_send_message &rArr; net_udp_send_if &rArr; net_ip6_send_frame &rArr; net_ip6_frag_get &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_client_run
</UL>

<P><STRONG><a name="[2e9]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_dhcp_client.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_client_run
</UL>

<P><STRONG><a name="[75]"></a>dhcp6_listener</STRONG> (Thumb, 944 bytes, Stack size 40 bytes, net_dhcp6_client.o(.text.dhcp6_listener))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = dhcp6_listener &rArr; OUTLINED_FUNCTION_4 &rArr; select_server &rArr; debug_inf2 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_ia_na
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_dhcp6_client.o(.text.net_dhcp6_client_init)
</UL>
<P><STRONG><a name="[27b]"></a>dhcp6_client_start</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, net_dhcp6_client.o(.text.dhcp6_client_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = dhcp6_client_start &rArr; net_udp_open &rArr; OUTLINED_FUNCTION_6 &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_open
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_rand32
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp6_client_init
</UL>

<P><STRONG><a name="[282]"></a>dhcp6_send_message</STRONG> (Thumb, 388 bytes, Stack size 48 bytes, net_dhcp6_client.o(.text.dhcp6_send_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = dhcp6_send_message &rArr; net_udp_send_if &rArr; net_ip6_send_frame &rArr; net_ip6_frag_get &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_buf
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_strcpy
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp6_client_run
</UL>

<P><STRONG><a name="[1fa]"></a>get_tout</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, net_dhcp6_client.o(.text.get_tout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_tout
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_rand32
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp6_client_run
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[273]"></a>debug_inf2</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, net_dhcp6_client.o(.text.debug_inf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = debug_inf2 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_bin2hex
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_server
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_send_message
</UL>

<P><STRONG><a name="[223]"></a>check_client_id</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, net_dhcp6_client.o(.text.check_client_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = check_client_id
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>

<P><STRONG><a name="[235]"></a>select_server</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, net_dhcp6_client.o(.text.select_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = select_server &rArr; debug_inf2 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>

<P><STRONG><a name="[27d]"></a>proc_opt_ia_na</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, net_dhcp6_client.o(.text.proc_opt_ia_na))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = proc_opt_ia_na &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_comp
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_ntoa
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_listener
</UL>

<P><STRONG><a name="[1f9]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_dhcp6_client.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; get_tout
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tout
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp6_client_run
</UL>

<P><STRONG><a name="[20a]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_dhcp6_client.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp6_client_run
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp6_client_init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_listener
</UL>

<P><STRONG><a name="[222]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, net_dhcp6_client.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; check_client_id
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_client_id
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_listener
</UL>

<P><STRONG><a name="[22f]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_dhcp6_client.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp6_client_run
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_listener
</UL>

<P><STRONG><a name="[234]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net_dhcp6_client.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; select_server &rArr; debug_inf2 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_server
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_listener
</UL>

<P><STRONG><a name="[27e]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, net_dhcp6_client.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_listener
</UL>

<P><STRONG><a name="[240]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_dhcp6_client.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netDHCP6_Notify
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp6_client_run
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_listener
</UL>

<P><STRONG><a name="[247]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_dhcp6_client.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_listener
</UL>

<P><STRONG><a name="[281]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net_dhcp6_client.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_listener
</UL>

<P><STRONG><a name="[24c]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net_dhcp6_client.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_rand32
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp6_client_run
</UL>

<P><STRONG><a name="[2e6]"></a>OUTLINED_FUNCTION_10</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_dhcp6_client.o(.text.OUTLINED_FUNCTION_10))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp6_client_run
</UL>

<P><STRONG><a name="[20f]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_dhcp6_client.o(.text.OUTLINED_FUNCTION_11))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_11 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_listener
</UL>

<P><STRONG><a name="[2e7]"></a>OUTLINED_FUNCTION_12</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net_dhcp6_client.o(.text.OUTLINED_FUNCTION_12))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp6_client_run
</UL>

<P><STRONG><a name="[213]"></a>OUTLINED_FUNCTION_13</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net_dhcp6_client.o(.text.OUTLINED_FUNCTION_13))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OUTLINED_FUNCTION_13 &rArr; net_addr6_ntoa &rArr; ip6_ntoa &rArr; ip4_ntoa &rArr; net_itoa &rArr; i2str &rArr; ul2str
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_ntoa
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_listener
</UL>

<P><STRONG><a name="[216]"></a>OUTLINED_FUNCTION_14</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net_dhcp6_client.o(.text.OUTLINED_FUNCTION_14))
<BR><BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_listener
</UL>

<P><STRONG><a name="[219]"></a>OUTLINED_FUNCTION_15</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net_dhcp6_client.o(.text.OUTLINED_FUNCTION_15))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OUTLINED_FUNCTION_15 &rArr; net_addr6_ntoa &rArr; ip6_ntoa &rArr; ip4_ntoa &rArr; net_itoa &rArr; i2str &rArr; ul2str
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_ntoa
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_listener
</UL>

<P><STRONG><a name="[27f]"></a>OUTLINED_FUNCTION_16</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_dhcp6_client.o(.text.OUTLINED_FUNCTION_16))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_listener
</UL>

<P><STRONG><a name="[77]"></a>nbns_listener</STRONG> (Thumb, 384 bytes, Stack size 40 bytes, net_nbns_client.o(.text.nbns_listener))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = nbns_listener &rArr; net_udp_send_if &rArr; net_ip6_send_frame &rArr; net_ip6_frag_get &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_buf
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_ntoa
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_strcasecmp
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base16_decode
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_nbns_client.o(.text.net_nbns_client_init)
</UL>
<P><STRONG><a name="[2a7]"></a>base16_decode</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, net_nbns_client.o(.text.base16_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = base16_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
</UL>

<P><STRONG><a name="[1fb]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_nbns_client.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_nbns_client_init
</UL>

<P><STRONG><a name="[20b]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_nbns_client.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
</UL>

<P><STRONG><a name="[224]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_nbns_client.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
</UL>

<P><STRONG><a name="[236]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net_nbns_client.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_nbns_client_init
</UL>

<P><STRONG><a name="[31f]"></a>ping_send_req</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, net_ping_core.o(.text.ping_send_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = ping_send_req &rArr; net_icmp6_send_echo &rArr; net_icmp6_send &rArr; net_ip6_send_frame &rArr; net_ip6_frag_get &rArr; net_mem_free &rArr; net_dbg_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send_echo
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ping_client_run
</UL>

<P><STRONG><a name="[2ba]"></a>opt_ascii</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, net_sys.o(.text.opt_ascii))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netIF_GetOption
</UL>

<P><STRONG><a name="[30d]"></a>sys_map_if</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, net_sys.o(.text.sys_map_if))
<BR><BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_map_if
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_map_all
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_map_if
</UL>

<P><STRONG><a name="[298]"></a>ip4_ntoa</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, net_addr.o(.text.ip4_ntoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ip4_ntoa &rArr; net_itoa &rArr; i2str &rArr; ul2str
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_itoa
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netIP_ntoa
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_ntoa
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_ntoa
</UL>

<P><STRONG><a name="[29a]"></a>ip6_ntoa</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, net_addr.o(.text.ip6_ntoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ip6_ntoa &rArr; ip4_ntoa &rArr; net_itoa &rArr; i2str &rArr; ul2str
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_ntoa
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netIP_ntoa
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_ntoa
</UL>

<P><STRONG><a name="[29b]"></a>mac_ntoa</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, net_addr.o(.text.mac_ntoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mac_ntoa &rArr; net_bin2hex
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_strtoupper
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_bin2hex
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mac_ntoa
</UL>

<P><STRONG><a name="[1fc]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net_addr.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; net_ultox
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ultox
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_ntoa
</UL>

<P><STRONG><a name="[2ca]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_addr.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_aton
</UL>

<P><STRONG><a name="[279]"></a>debug_info</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, net_ip4.o(.text.debug_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = debug_info &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_ntoa
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
</UL>

<P><STRONG><a name="[296]"></a>ip4_is_subcast</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, net_ip4.o(.text.ip4_is_subcast))
<BR><BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_is_subcast
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
</UL>

<P><STRONG><a name="[294]"></a>ip4_get_chksum</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_ip4.o(.text.ip4_get_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ip4_get_chksum &rArr; net_chksum_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_chksum_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
</UL>

<P><STRONG><a name="[30e]"></a>ip4_get_mtu</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, net_ip4.o(.text.ip4_get_mtu))
<BR><BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
</UL>

<P><STRONG><a name="[1fe]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_ip4.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
</UL>

<P><STRONG><a name="[27a]"></a>debug_info</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, net_ip6.o(.text.debug_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = debug_info &rArr; net_dbg_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_ntoa
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_send_frame
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_chk_frame
</UL>

<P><STRONG><a name="[315]"></a>ip6_get_mtu</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, net_ip6.o(.text.ip6_get_mtu))
<BR><BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_send_frame
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_chk_frame
</UL>

<P><STRONG><a name="[1ff]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_ip6.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_chk_frame
</UL>

<P><STRONG><a name="[2a3]"></a>mem_lock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_mem.o(.text.mem_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mem_lock &rArr; netos_lock &rArr; osMutexAcquire &rArr; EvrRtxMutexAcquire &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>

<P><STRONG><a name="[2a5]"></a>mem_unlock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_mem.o(.text.mem_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mem_unlock &rArr; netos_unlock &rArr; osMutexRelease &rArr; EvrRtxMutexRelease &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>

<P><STRONG><a name="[2e2]"></a>crc32_8bit</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, net_common.o(.text.crc32_8bit))
<BR><BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_crc_buf
</UL>

<P><STRONG><a name="[293]"></a>ul2str</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, net_common.o(.text.ul2str))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ul2str
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2str
</UL>

<P><STRONG><a name="[292]"></a>i2str</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, net_common.o(.text.i2str))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = i2str &rArr; ul2str
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ul2str
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_itoa_n0
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_itoa
</UL>

<P><STRONG><a name="[333]"></a>hex2uc</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, net_common.o(.text.hex2uc))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_xtouc
</UL>

<P><STRONG><a name="[142]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[6d]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[15f]"></a>AlignUp</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_alloc_threads.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap1_SizeAdjust
</UL>

<P><STRONG><a name="[15e]"></a>Heap1_SizeAdjust</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, h1_alloc_threads.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlignUp
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_internal$concurrent
</UL>

<P><STRONG><a name="[169]"></a>_freopen_locked</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = _freopen_locked &rArr; _fclose_internal &rArr; free &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexRelease &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fopen$locked
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[176]"></a>AlignUpOffset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, h1_extend_threads.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
